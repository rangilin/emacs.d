<p>Emacs has often been criticized for failing to provide a more
extensive string manipulation API (compared to that of programming
languages like Ruby and Perl, for instance).  As many programs
(extensions) running on top of it are doing quite a lot of string
manipulation, having a good string API is important. To compensate the
lack of certain primitives in Emacs itself a lot of package authors
are using these days packages like
<a href="https://github.com/magnars/s.el">s.el</a> or simply adding the string
functions they need directly to their packages (to reduce the number
of third-party deps).</p>

<p>In Emacs 24.4 finally the situation is improving. Finally, we&#8217;re getting
<code>string-suffix-p</code>, which was mysteriously missing even though <code>string-prefix-p</code>
has been part of Emacs for years:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="nv">string-suffix-p</span> <span class="s">&quot;test&quot;</span> <span class="s">&quot;my_test&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">; =&gt; t</span>
</span><span class='line'><span class="p">(</span><span class="nv">string-suffix-p</span> <span class="s">&quot;tester&quot;</span> <span class="s">&quot;my_test&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">; =&gt; nil</span>
</span></code></pre></td></tr></table></div></figure>


<p>More importantly, Emacs 24.4 ships with a new built-in library called <code>subr-x</code>, which features
a bunch of other string manipulation functions:</p>

<ul>
<li><code>string-blank-p</code></li>
<li><code>string-empty-p</code></li>
<li><code>string-join</code></li>
<li><code>string-reverse</code></li>
<li><code>string-trim-left</code></li>
<li><code>string-trim-right</code></li>
<li><code>string-trim</code></li>
<li><code>string-remove-prefix</code></li>
<li><code>string-remove-suffix</code></li>
</ul>


<p>Here&#8217;s a brief demo of them in action:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="c1">;; all functions in the library are defined as inline, so you don&#39;t</span>
</span><span class='line'><span class="c1">;; need to require the library at runtime</span>
</span><span class='line'><span class="p">(</span><span class="nv">eval-when-compile</span> <span class="p">(</span><span class="nb">require</span> <span class="ss">&#39;subr-x</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nv">string-empty-p</span> <span class="s">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">; =&gt; t</span>
</span><span class='line'><span class="p">(</span><span class="nv">string-empty-p</span> <span class="s">&quot;  &quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">; =&gt; nil</span>
</span><span class='line'><span class="p">(</span><span class="nv">string-blank-p</span> <span class="s">&quot;  &quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">; =&gt; 0 (#o0, #x0, ?\C-@)</span>
</span><span class='line'><span class="p">(</span><span class="nv">string-reverse</span> <span class="s">&quot;Batman&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">; =&gt; &quot;namtaB&quot;</span>
</span><span class='line'><span class="p">(</span><span class="nv">string-join</span> <span class="o">&#39;</span><span class="p">(</span><span class="s">&quot;one&quot;</span> <span class="s">&quot;two&quot;</span> <span class="s">&quot;three&quot;</span><span class="p">))</span>
</span><span class='line'><span class="c1">; =&gt; &quot;onetwothree&quot;</span>
</span><span class='line'><span class="p">(</span><span class="nv">string-join</span> <span class="o">&#39;</span><span class="p">(</span><span class="s">&quot;one&quot;</span> <span class="s">&quot;two&quot;</span> <span class="s">&quot;three&quot;</span><span class="p">)</span> <span class="s">&quot;,&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">; =&gt; &quot;one,two,three&quot;</span>
</span><span class='line'><span class="p">(</span><span class="nb">string-trim</span> <span class="s">&quot;   Peter Parker &quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">; =&gt; &quot;Peter Parker&quot;</span>
</span><span class='line'><span class="p">(</span><span class="nv">string-remove-prefix</span> <span class="s">&quot;Mr. &quot;</span> <span class="s">&quot;Mr. Smith&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">; =&gt; &quot;Smith&quot;</span>
</span><span class='line'><span class="p">(</span><span class="nv">string-remove-suffix</span> <span class="s">&quot;Smith&quot;</span> <span class="s">&quot;Mr. Smith&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">; =&gt; &quot;Mr. &quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Sure, <code>subr-x</code> is not as extensive as <code>s.el</code> (and will never be), but
I think that it&#8217;s a big step in the right direction. It&#8217;s likely that
<code>subr-x</code> will be extended in subsequent Emacs versions and some of the
functions from it will be promoted to <code>built-in</code>.</p>

<p>That&#8217;s all I have for now. Until next time!</p>
