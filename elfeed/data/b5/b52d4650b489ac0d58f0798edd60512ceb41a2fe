<p>It is no secret that I&#39;m a huge proponent of fast tests and their contribution to effective testing and design techniques. When doing any form of test-first development, the length of the feedback cycle when running individual tests should be as fast as possible. The design techniques associated with test-driven development (TDD), in particular, rely on taking small steps, teasing out design guidance via constant and focused refactoring. To do this, it is essential that running individual tests, the ones you are working on right now, be so fast it would be silly not to run them constantly. I&#39;m not talking here about the time for the entire test suite, but rather for the the individual tests that you run while developing a specific component.</p>

<p>Of course, with Ruby on Rails, test speed has always been a huge problem. Or, rather, it isn&#39;t the individual tests that are slow to run, but rather the startup time for Rails is generally at least an order of magnitude longer than the time it takes to run the tests. This post is focused on how to test more effectively, writing tests against individual, isolated parts of your application.</p>

<p><aside class='callout highlight'>
<h2>As An Aside</h2>
The recent release of Rails 4.1 includes the Spring application pre-loader to help with startup time. This is the latest in a long-line of application pre-loaders, but this one has been bundled into the core distribution. While this helps startup time, it is really just a band-aid over the real problem: loading up your entire environment when running a microtest. By loading up your entire environment, you lose one of the most important parts of test-driven development: design feedback. The feedback provided by TDD can be understood in many ways, but I like to explain it in a simple statement:</p>

<p>&quot;If you find something difficult to test, change your design to make it easy to test.&quot;</p>

<p>If this seems a bit overly simplistic, I recommend you watch Michael Feathers great talk called <em><a href="http://vimeo.com/15007792">The Deep Synergy Between Testability and Good Design</a></em>. In it he discusses how many instances of code smells are naturally dealt with by focusing on testability.
</aside></p>

<p>I&#39;d like to share a technique for speeding up the tests that are dependent on ActiveRecord and the database. While there is a lot of information and talk about testing the parts of your system that are independent of the Rails framework (and, frankly, most of your business logic should be isolated from Rails), there isn&#39;t a lot about how to make your tests truly effective and enjoyable when testing those parts that are integrated with Rails. This post covers the specific case where you are testing an ActiveRecord model.</p>

<p>But, wait, you say, aren&#39;t unit tests isolated from the database? If they touch the database, are you still writing unit tests! Perhaps, perhaps not. This post, though, is not about the meaning of the term &quot;unit tests&quot;, or even if we should all switch to the term &quot;<a href="http://anarchycreek.com/2009/05/20/theyre-called-microtests/">micro tests</a>&quot;. It is true that almost of all of your code should be isolated from the database with one exception: code that is writing and making sql queries. That is, ActiveRecord scopes and other code that explicitly updates records in the database.</p>

<p>I love scopes. I find them to be a great way to emphasize &quot;Expresses Intent&quot; from the <a href="http://c2.com/cgi/wiki?XpSimplicityRules">4 rules of simple design</a>. In fact, for anything other than simple lookups using an id or a single field, I almost always use scopes. Providing a name for a lookup makes my code more understandable. It also allows me to test my business logic isolated from the details of the database. For me, TDD naturally leads to heavy scope usage.</p>

<p>When talking about isolation tests, we generally think of using some form of test double. Isolation, though, is about only including the parts of your system that the code needs to run. When talking about scopes, this necessarily includes the database. So, we want to test scopes with an actual connection against our database. But loading up Rails ends up taking more time than running the actual test. With a small-ish codebase, this might be a matter of only a couple seconds, but the load time increases as your application gets larger.</p>

<p>So, what can we do? Let&#39;s think about what it means to test a scope.</p>

<p>When testing against your db, you really only need to do a couple steps:</p>

<ul>
<li>Create a connection to the database</li>
<li>Load up the code under test</li>
<li>Seed the database with appropriate data</li>
<li>Run the code under test</li>
<li>Verify the results</li>
</ul>

<p>This attitude, keeping isolated to just the essentials has led me to build a new spec helper called active_record_spec_helper. Here&#39;s what it looks like.</p>
<div class="highlight"><pre><code class="ruby language-ruby" data-lang="ruby"><span class="nb">require</span> <span class="s1">&#39;active_record&#39;</span>

<span class="n">connection_info</span> <span class="o">=</span> <span class="no">YAML</span><span class="o">.</span><span class="n">load_file</span><span class="p">(</span><span class="s2">&quot;config/database.yml&quot;</span><span class="p">)</span><span class="o">[</span><span class="s2">&quot;test&quot;</span><span class="o">]</span>
<span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">establish_connection</span><span class="p">(</span><span class="n">connection_info</span><span class="p">)</span>

<span class="no">RSpec</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
  <span class="n">config</span><span class="o">.</span><span class="n">around</span> <span class="k">do</span> <span class="o">|</span><span class="n">example</span><span class="o">|</span>
    <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">transaction</span> <span class="k">do</span>
      <span class="n">example</span><span class="o">.</span><span class="n">run</span>
      <span class="k">raise</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Rollback</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>As an example of usage, here&#39;s a scope that we might want to test.</p>
<div class="highlight"><pre><code class="ruby language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">Coderetreat</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">running_today</span>
    <span class="n">where</span><span class="p">(</span><span class="n">scheduled_on</span><span class="p">:</span> <span class="no">Date</span><span class="o">.</span><span class="n">today</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>Now, at the top of our spec file, rather than writing</p>
<div class="highlight"><pre><code class="ruby language-ruby" data-lang="ruby"><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>
</code></pre></div>
<p>and loading the whole framework and all the dependencies, we can require our active_record_spec_helper.</p>
<div class="highlight"><pre><code class="ruby language-ruby" data-lang="ruby"><span class="nb">require</span> <span class="s1">&#39;active_record_spec_helper&#39;</span>
<span class="nb">require</span> <span class="s1">&#39;models/coderetreat&#39;</span>

<span class="n">describe</span> <span class="no">Coderetreat</span> <span class="k">do</span>
  <span class="n">describe</span> <span class="s2">&quot;.running_today&quot;</span> <span class="k">do</span>
    <span class="n">it</span> <span class="s2">&quot;returns a coderetreat scheduled for today&quot;</span> <span class="k">do</span>
      <span class="n">coderetreat</span> <span class="o">=</span> <span class="no">Coderetreat</span><span class="o">.</span><span class="n">create!</span> <span class="ss">city</span><span class="p">:</span> <span class="s2">&quot;Chicago&quot;</span><span class="p">,</span> <span class="n">scheduled_on</span><span class="p">:</span> <span class="no">Date</span><span class="o">.</span><span class="n">today</span>
      <span class="no">Coderetreat</span><span class="o">.</span><span class="n">running_today</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">should</span> <span class="o">=~</span> <span class="o">[</span><span class="n">coderetreat</span><span class="o">]</span>
    <span class="k">end</span>

    <span class="n">it</span> <span class="s2">&quot;does not return a coderetreat not scheduled for today&quot;</span> <span class="k">do</span>
      <span class="n">coderetreat</span> <span class="o">=</span> <span class="no">Coderetreat</span><span class="o">.</span><span class="n">create!</span> <span class="ss">city</span><span class="p">:</span> <span class="s2">&quot;Chicago&quot;</span><span class="p">,</span> <span class="n">scheduled_on</span><span class="p">:</span> <span class="no">Date</span><span class="o">.</span><span class="n">today</span><span class="o">.</span><span class="n">advance</span><span class="p">(</span><span class="ss">:days</span> <span class="o">=&gt;</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
      <span class="no">Coderetreat</span><span class="o">.</span><span class="n">running_today</span><span class="o">.</span><span class="n">should</span> <span class="n">be_empty</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>Doing a timing comparison on my machine, running with the full spec_helper looks like:</p>
<div class="highlight"><pre><code class="bash language-bash" data-lang="bash">Finished in 0.04543 seconds
2 examples, 0 failures

real    0m3.004s
user    0m1.624s
sys 0m0.640s
</code></pre></div>
<p>Switching to using active_record_spec_helper, it looks like:</p>
<div class="highlight"><pre><code class="bash language-bash" data-lang="bash">Finished in 0.04452 seconds
2 examples, 0 failures

real    0m1.224s
user    0m0.712s
sys 0m0.200s
</code></pre></div>
<p>That&#39;s nearly a 2-second savings for each run. This is a very small application, too. As it grows, the spec_helper version will increase its time to load. The active_record_spec_helper version, though, will stay at the 1.2 seconds. This is one of the benefits of isolated testing:</p>

<p><strong>Your tests do not change as the complexity of the rest of the application grows</strong>.</p>

<p>There is another very large benefit of this: how this relates to the design feedback of TDD. Notice that we have to explicitly require the model we are testing. Because we are not loading up our entire application, we can&#39;t rely on having everything available to us; we have to be explicit about the code that is under test. Not just the code we have under test, but also its dependencies. So, if your model includes a module, you need to explicitly require that. But, why is this good? </p>

<p>Rampant coupling and complex dependency graphs are one of the most significant causes of difficulty around change, and larger Rails-based applications are poster-children of these problems. While the auto-loading in Rails can be useful at times, it definitely makes it easy to hide your coupling. On the surface, this is good. Until you come back to make changes and find yourself wading through a complex game of &quot;why is X happening, and where is that code defined.&quot;</p>

<p>Now, I&#39;m not here to say don&#39;t use the auto-loader; it can be handy. Instead, pay attention to the number of dependencies you have. One way would be to list your dependencies as comments at the top of your model files. Of course, comments very rapidly rot. Instead, rely on your executable documention, your examples. By forcing yourself to load your dependencies when testing, you have a living list of dependencies. When this starts to get too large, listen to the feedback and do some refactoring. After all, TDD is about listening to the feedback your tests provide. If you mask this feedback, you lose a huge benefit.</p>

<p>Thanks to <a href="https://twitter.com/fablednet">Sarah Gray</a> for proof-reading this post.</p>
