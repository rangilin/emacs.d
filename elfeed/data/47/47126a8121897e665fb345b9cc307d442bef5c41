<div><p>A few years back Phil Haack wrote a <a href="http://haacked.com/archive/2011/10/16/the-dangers-of-implementing-recurring-background-tasks-in-asp-net.aspx/">great article on the dangers of recurring background tasks in ASP.NET</a>. In it he points out a few gotchas that are SO common when folks try to do work in the background. Read it, but here's a summary from his post.</p>  <ul>   <li>An unhandled exception in a thread not associated with a request will take down the process. </li>    <li>If you run your site in a Web Farm, you could end up with multiple instances of your app that all attempt to run the same task at the same time. </li>    <li>The AppDomain your site runs in can go down for a number of reasons and take down your background task with it. </li> </ul>  <p>If you think you can just write a background task yourself, it's likely you'll get it wrong. I'm not impugning your skills, I'm just saying it's <strong>subtle</strong>. Plus, why should you have to?</p>  <p>There's LOT of great ways for you to do things in the background and a lot of libraries and choices available.</p>  <p>Some ASP.NET apps will be hosted in IIS in your data center and others will be hosted in the Azure cloud. The spectrum of usage is roughly this, in my opinion:</p>  <ul>   <li>General: <a href="http://hangfire.io/">Hangfire</a> (or similar similar open source libraries)       <ul>       <li>used for writing background tasks in your ASP.NET website </li>     </ul>   </li>    <li>Cloud: <a href="http://www.hanselman.com/blog/IntroducingWindowsAzureWebJobs.aspx">Azure WebJobs</a>&#160; <ul>       <li>A formal Azure feature used for offloading running of background tasks outside of your Website and scale the workload </li>     </ul>   </li>    <li>Advanced: <a href="http://azure.microsoft.com/en-us/documentation/articles/fundamentals-application-models/#CloudServices">Azure Worker Role in a Cloud Service</a>       <ul>       <li>scale the background processing workload independently of your Website and you need control over the machine </li>     </ul>   </li> </ul>  <p>There's lots of great articles and videos on how to use <a href="http://www.hanselman.com/blog/IntroducingWindowsAzureWebJobs.aspx">Azure WebJobs</a>, and lots of documentation on how Worker Roles in scalable <a href="http://azure.microsoft.com/en-us/documentation/articles/fundamentals-application-models/#CloudServices">Azure Cloud Services</a> work, but not a lot about how your hosted ASP.NET application and easily have a background service. Here's a few.</p>  <h3><a href="https://github.com/NuGet/WebBackgrounder">WebBackgrounder</a></h3>  <p>As it says &quot;<a href="https://github.com/NuGet/WebBackgrounder">WebBackgrounder</a> is a proof-of-concept of a web-farm friendly background task manager meant to just work with a vanilla ASP.NET web application.&quot; Its code hasn't been touched in years, BUT the <a href="http://www.nuget.org/packages/webbackgrounder">WebBackgrounder NuGet package</a> has been downloaded almost a half-million times. </p>  <blockquote>   <p>The goal of this project is to handle one task only, manage a recurring task on an interval in the background for a web app.</p> </blockquote>  <p>If your ASP.NET application just needs one background task to runs an a basic scheduled interval, than perhaps you just need the basics of WebBackgrounder.</p>  <pre class="brush: csharp; gutter: false; toolbar: false; auto-links: false;">using System;<br />using System.Threading;<br />using System.Threading.Tasks;<br /><br />namespace WebBackgrounder.DemoWeb<br />{<br />    public class SampleJob : Job<br />    {<br />        public SampleJob(TimeSpan interval, TimeSpan timeout)<br />            : base(&quot;Sample Job&quot;, interval, timeout)<br />        {<br />        }<br /><br />        public override Task Execute()<br />        {<br />            return new Task(() =&gt; Thread.Sleep(3000));<br />        }<br />    }<br />}</pre> <h3>Built in: <a href="http://QueueBackgroundWorkItem - Added in .NET 4.5.2">QueueBackgroundWorkItem - Added in .NET 4.5.2</a></h3> <p>Somewhat in response to the need for WebBackgrounder, <a href="http://blogs.msdn.com/b/webdev/archive/2014/06/04/queuebackgroundworkitem-to-reliably-schedule-and-run-long-background-process-in-asp-net.aspx">.NET 4.5.2 added QueueBackgroundWorkItem as a new API</a>. It's not just a &quot;Task.Run,&quot; it tries to be more:</p> <blockquote>   <p>QBWI schedules a task which can run in the background, independent of any request. This differs from a normal ThreadPool work item in that ASP.NET automatically keeps track of how many work items registered through this API are currently running, and the ASP.NET runtime will <strong><em>try</em></strong> to delay <a href="http://odetocode.com/articles/305.aspx">AppDomain</a> shutdown until these work items have finished executing.</p> </blockquote> <p>It can try to delay an AppDomain for as long as 90 seconds in order to allow your task to complete. If you can't finish in 90 seconds, then you'll need a different (and more robust, meaning, out of process) technique.</p> <p>The API is pretty straightforward, taking&#160; Func&lt;CancellationToken, Task&gt;. Here's an example that kicks of a background work item from an MVC action:</p> <pre class="brush: csharp; gutter: false; toolbar: false; auto-links: false;">public ActionResult SendEmail([Bind(Include = &quot;Name,Email&quot;)] User user)<br />{<br />    if (ModelState.IsValid)<br />    {<br />       HostingEnvironment.QueueBackgroundWorkItem(ct =&gt; SendMailAsync(user.Email));<br />       return RedirectToAction(&quot;Index&quot;, &quot;Home&quot;);<br />    }<br /><br />    return View(user);<br />}  </pre> <h3><a href="https://github.com/jgeurts/FluentScheduler">FluentScheduler</a></h3> <p>FluentScheduler is a more sophisticated and complex scheduler that features a (you guessed it) fluent interface. You have really explicit control over when your tasks run.</p> <pre class="brush: csharp; gutter: false; toolbar: false; auto-links: false;">using FluentScheduler;<br /><br />public class MyRegistry : Registry<br />{<br />    public MyRegistry()<br />    {<br />        // Schedule an ITask to run at an interval<br />        Schedule&lt;MyTask&gt;().ToRunNow().AndEvery(2).Seconds();<br /><br />        // Schedule a simple task to run at a specific time<br />        Schedule(() =&gt; Console.WriteLine(&quot;Timed Task - Will run every day at 9:15pm: &quot; + DateTime.Now)).ToRunEvery(1).Days().At(21, 15);<br /><br />        // Schedule a more complex action to run immediately and on an monthly interval<br />        Schedule(() =&gt;<br />        {<br />            Console.WriteLine(&quot;Complex Action Task Starts: &quot; + DateTime.Now);<br />            Thread.Sleep(1000);<br />            Console.WriteLine(&quot;Complex Action Task Ends: &quot; + DateTime.Now);<br />        }).ToRunNow().AndEvery(1).Months().OnTheFirst(DayOfWeek.Monday).At(3, 0);<br />    }<br />} </pre> <p>FluentScheduler also embraces IoC and can easily plug into your favorite Dependency Injection tool of choice by just implementing their ITaskFactory interface.</p> <h3><a href="http://www.quartz-scheduler.net/">Quartz.NET</a></h3> <p>Quartz.NET is a .NET port of the popular Java job scheduling framework of the (almost) same name. It's very actively developed. Quartz has an IJob interface with just one method, Execute, to implement.</p> <pre class="brush: csharp; gutter: false; toolbar: false; auto-links: false;">using Quartz;<br />using Quartz.Impl;<br />using System;<br /><br />namespace ScheduledTaskExample.ScheduledTasks<br />{<br />    public class JobScheduler<br />    {<br />        public static void Start()<br />        {<br />            IScheduler scheduler = StdSchedulerFactory.GetDefaultScheduler();<br />            scheduler.Start();<br /><br />            IJobDetail job = JobBuilder.Create&lt;MyJob&gt;().Build();<br /><br />            ITrigger trigger = TriggerBuilder.Create()<br />                .WithDailyTimeIntervalSchedule<br />                  (s =&gt;<br />                     s.WithIntervalInHours(24)<br />                    .OnEveryDay()<br />                    .StartingDailyAt(TimeOfDay.HourAndMinuteOfDay(0, 0))<br />                  )<br />                .Build();<br /><br />            scheduler.ScheduleJob(job, trigger);<br />        }<br />    }<br />}</pre> <p>Then, inside your Application_Start, you call JobScheduler.Start(). There's a <a href="http://www.mikesdotnetting.com/Article/254/Scheduled-Tasks-In-ASP.NET-With-Quartz.Net">great getting started article on Quartz at Mikesdotnetting</a> you should check out.</p> <h3><a href="http://hangfire.io/">Hangfire</a></h3> <p>And last but definitely not least, the most polished (IMHO) of the group, <a href="http://hangfire.io/">Hangfire</a> by <a href="https://twitter.com/odinserj">@odinserj</a>. It's a <strong>fantastic </strong>framework for background jobs in ASP.NET. It's even optionally backed by Redis, SQL Server, SQL Azure, MSMQ, or RabbitMQ for reliability.</p> <p>The <a href="http://docs.hangfire.io/en/latest/">Hangfire documentation is amazing</a>, really. Every open source project's document should be this polished. Heck, ASP.NET's documentation should be this good.</p> <p>The best feature from Hangfire is its built in /hangfire dashboard that shows you all your scheduled, processing, succeeded and failed jobs. It's really a nice polished addition.</p> <p><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://www.hanselman.com/blog/content/binary/Windows-Live-Writer/f8d7abe23a92_1672/image_0595e62a-c9fa-4a5e-a108-3931e1be22b0.png" width="776" height="420" /></p> <p>You can enqueue &quot;fire and forget&quot; jobs easily and they are backed by persistent queues:</p> <pre class="brush: csharp; gutter: false; toolbar: false; auto-links: false;">BackgroundJob.Enqueue(() =&gt; Console.WriteLine(&quot;Fire-and-forget&quot;));</pre> <p>You can delay them...</p> <pre class="brush: csharp; gutter: false; toolbar: false; auto-links: false;">BackgroundJob.Schedule(() =&gt; Console.WriteLine(&quot;Delayed&quot;), TimeSpan.FromDays(1));</pre> <p>Or great very sophisticated CRON style recurrent tasks:</p> <pre class="brush: csharp; gutter: false; toolbar: false; auto-links: false;">RecurringJob.AddOrUpdate(() =&gt; Console.Write(&quot;Recurring&quot;), Cron.Daily);</pre> <p>Hangfire is just a joy.</p> <p>Check out the <a href="http://docs.hangfire.io/en/latest/tutorials/highlight.html">Hangfire Highlighter Tutorial</a> for a sophisticated but easy to follow real-world example.</p> <p>There's a rich ecosystem out there ready to help you with your background tasks. All these libraries are excellent, are open source, and are available as <a href="https://www.nuget.org">NuGet Packages</a>. </p> <p>Did I miss your favorite? Sound off in the comments!</p> <hr /> <p><strong>Sponsor: </strong>Many thanks to my friends at Raygun for sponsoring the feed this week. I *love* <a href="http://hnsl.mn/1BXPpIU">Raygun</a> and use it myself. It's amazing. <b>Get notified of your software’s bugs as they happen!</b> Raygun.io has error tracking solutions for every major programming language and platform - <b><u><a href="http://hnsl.mn/1BXPpIU">Start a free trial in under a minute!</a></u></b></p><br/><hr/>© 2014 Scott Hanselman. All rights reserved. <br/></div>

 <div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.hanselman.com/_/28/73028756/scotthanselman"><img height="20" src="http://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Share on Google+" href="http://feeds.hanselman.com/_/30/73028756/scotthanselman"><img height="20" src="http://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.hanselman.com/_/24/73028756/scotthanselman"><img height="20" src="http://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.hanselman.com/_/19/73028756/scotthanselman"><img height="20" src="http://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.hanselman.com/_/20/73028756/scotthanselman"><img height="20" src="http://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a>&#160;</div>
