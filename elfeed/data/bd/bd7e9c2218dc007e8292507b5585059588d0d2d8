<p>這次去北京參加 RubyConfChina 2013 的來回飛機上，寫完了一個練習用的小專案：<a href="https://github.com/hSATAC/gosnake">gosnake</a>，很明顯就是用 Go 寫的貪食蛇。會挑貪食蛇來練習，是因為之前在 iOS Dev Bootcamp 參加 <a href="https://twitter.com/zonble">zonble</a> 的 workshop，題目就是寫一個貪食蛇，覺得這個題目拿來練習真的是挺不錯的。</p>

<p>先來看看動起來的樣子：</p>

<script type="text/javascript" src="http://asciinema.org/a/6115.js" id="asciicast-6115" async></script>


<p>程式本身很簡單，沒什麼好說的，倒是想紀錄一些開發上使用到的工具。</p>

<!-- more -->


<h3>開發環境</h3>

<p>首先我們都知道 Go 有所謂的 <code>GOPATH</code>，src, pkg 等等東西都會安裝在這裡。不過每個專案都有自己的套件相依性，再加上如果東西一直裝，這個目錄會很大一包。所以一般建議會在開發專案時，把 <code>GOPATH</code> 設定到專案目錄底下，以免互相污染。<a href="http://twitter.com/c9s">c9s</a> 有寫了一個 script <a href="https://github.com/c9s/goenv">goenv</a> 來簡化這個步驟，我使用的則是我 <a href="https://github.com/hSATAC/goenv">fork 的版本</a>。</p>

<p>使用的方式很簡單，要開發這個專案的時候，切到專案目錄下 <code>source goenv</code> 即可。你的專案目錄下會建立一個 <code>go</code> 目錄，並且 <code>GOPATH</code> 會被指向此處。</p>

<h3>套件管理</h3>

<p><a href="https://github.com/c9s/goenv">goenv</a> 其實已經可以解決大部分的問題，如果把 <code>go</code> 目錄也直接 commit 進去的話其實就可以解決 reproducible build 的問題。不過還是希望能有類似 <code>bundler</code> 這樣的工具。</p>

<p>試了兩套 <a href="https://github.com/mattn/gom">gom</a> 跟 <a href="https://github.com/kr/godep">godep</a>。我自己是比較喜歡 gom 的 API 設計，而且他的 star 數也比較多。但是在 <code>gom gen gomfile</code> 自動掃描生成 <code>Gomfile</code> 這邊一直出現問題，會掃到很多不相關的東西。相對的同樣功能的 <code>godep save</code> 就沒什麼問題。並且也支援 <code>godep save -copy</code> 直接把整個 dependencies tree 複製到專案目錄下，讓你用 <code>GOPATH</code> 的方式使用，目前使用起來 <a href="https://github.com/kr/godep">godep</a> 是一個挺不錯的選擇。</p>

<p><a href="https://github.com/kr/godep">godep</a> 會把你指定的每個 package 裝到 tmp 目錄下，使用 <code>godep path</code> 就可以看到。</p>

<p>用 <code>godep</code> 指令包 <code>go</code> 指令的話就會從這些地方載入套件，有點像是 bundler 的感覺。<code>godep go build</code>, <code>godep go test</code>。</p>

<p>目前我還是 goenv 和 godeps 並行，看看將來的發展怎麼樣。也希望官方能儘快解決這個問題，不然現在第三方的 Go package management tool 以一個禮拜一套的速度在推出啊&hellip;。</p>

<p>更詳細的 <a href="https://github.com/kr/godep">godep</a> 教學，可以參考這篇文章： <a href="http://www.goinggo.net/2013/10/manage-dependencies-with-godep.html">Manage Dependencies With GODEP</a></p>

<h3>測試套件</h3>

<p>可能是 Ruby 寫慣了，總覺得 Go 內建的測試語法不太親民。我在這個專案使用了 <a href="https://github.com/stretchr/testify">testify</a> 的 <code>assert</code> 套件，可以寫出這樣的語法：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'>  <span class="c1">// assert equality</span>
</span><span class='line'>  <span class="nx">assert</span><span class="p">.</span><span class="nx">Equal</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span> <span class="mi">123</span><span class="p">,</span> <span class="mi">123</span><span class="p">,</span> <span class="s">&quot;they should be equal&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// assert inequality</span>
</span><span class='line'>  <span class="nx">assert</span><span class="p">.</span><span class="nx">NotEqual</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span> <span class="mi">123</span><span class="p">,</span> <span class="mi">456</span><span class="p">,</span> <span class="s">&quot;they should not be equal&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// assert for nil (good for errors)</span>
</span><span class='line'>  <span class="nx">assert</span><span class="p">.</span><span class="nx">Nil</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span> <span class="nx">object</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// assert for not nil (good when you expect something)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">assert</span><span class="p">.</span><span class="nx">NotNil</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span> <span class="nx">object</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// now we know that object isn&#39;t nil, we are safe to make</span>
</span><span class='line'>    <span class="c1">// further assertions without causing any errors</span>
</span><span class='line'>    <span class="nx">assert</span><span class="p">.</span><span class="nx">Equal</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span> <span class="s">&quot;Something&quot;</span><span class="p">,</span> <span class="nx">object</span><span class="p">.</span><span class="nx">Value</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://github.com/stretchr/testify">testify</a> 除了 <code>assert</code> 之外，也提供了 <code>http</code>, <code>mock</code>, <code>suite</code> 可使用，算是滿全面的測試工具。相類似的套件還有 <a href="http://labix.org/gocheck">gocheck</a> 這個也滿受歡迎的。</p>

<p>另外兩個我覺得不錯的測試工具是 <a href="https://github.com/smartystreets/goconvey">Goconvey</a> 以及 <a href="https://github.com/remogatto/prettytest">PrettyTest</a>。</p>

<p><a href="https://github.com/smartystreets/goconvey">GoConvey</a> 可算一套完整的 BDD/TDD 測試框架，使用了自己的語法，離原生的 <code>testing</code> 又更遙遠了，帶有 WebUI 以及漂亮的 terminal output 可以很清楚產出測試報表。</p>

<p><a href="https://github.com/remogatto/prettytest">PrettyTest</a> 則是用自己的 assert 來產出清晰的 terminal output，也可以搭配上面提到的 <a href="http://labix.org/gocheck">gocheck</a> 使用。</p>

<p>還有另外非常多的工具可以參考這篇：<a href="http://nathany.com/go-testing-toolbox/">Go Testing Toolbox</a></p>

<h3>其他工具</h3>

<p><a href="https://github.com/davecgh/go-spew">go-spew</a> 噴東西相當好用，什麼都可以噴，可以看一下他的 sample output 超威：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(main.Foo) {
</span><span class='line'> unexportedField: (*main.Bar)(0xf84002e210)({
</span><span class='line'>  flag: (main.Flag) flagTwo,
</span><span class='line'>  data: (uintptr) &lt;nil&gt;
</span><span class='line'> }),
</span><span class='line'> ExportedField: (map[interface {}]interface {}) {
</span><span class='line'>  (string) "one": (bool) true
</span><span class='line'> }
</span><span class='line'>}
</span><span class='line'>([]uint8) {
</span><span class='line'> 00000000  11 12 13 14 15 16 17 18  19 1a 1b 1c 1d 1e 1f 20  |............... |
</span><span class='line'> 00000010  21 22 23 24 25 26 27 28  29 2a 2b 2c 2d 2e 2f 30  |!"#$%&'()*+,-./0|
</span><span class='line'> 00000020  31 32                                             |12|
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p><a href="https://github.com/nsf/termbox-go">termbox-go</a> 則是寫 CUI 程式的好幫手，非常容易使用。之前那個用 terminal 看股票的 top <a href="https://github.com/michaeldv/mop">mop</a> 也是用這個寫的。</p>
