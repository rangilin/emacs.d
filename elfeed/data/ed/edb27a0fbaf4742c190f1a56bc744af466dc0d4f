<p>
<i>TLDR; In a few lines of Emacs Lisp, you can speed up your Clojure workflow, and it's easy.</i>
</p>

<p>
Recently I've been experimenting with <a href="https://github.com/clojure/tools.namespace">clojure.tools.namespace</a> and
<a href="http://thinkrelevance.com/blog/2013/06/04/clojure-workflow-reloaded">Stuart Sierra's Reloaded Workflow</a>. If you haven't read that post, you
should add it to your reading list. It's a smart way of adding a
reset button to your REPL session, to ensure a clean environment
without having to restart the JVM.
</p>

<p>
This post isn't really about that workflow <i>per se</i>, it's just a good
use-case to demonstrate a little Emacs/Clojure/CIDER-fu.
</p>

<p>
If you adopt that workflow, you'll find yourself repeatedly typing
this into the REPL:
</p>

<div class="org-src-container">

<pre class="src src-clojure">(<span style="color: #A6E22E;">require</span> 'clojure.tools.namespace.repl)
(clojure.tools.namespace.repl/refresh)
</pre>
</div>

<p>
There are a few ways to save that typing, but a little Emacs Lisp is
the most satisfying.
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">It's Simple</h2>
<div class="outline-text-2" id="text-1">
<p>
The easiest way in is to use the function <code>cider-interactive-eval</code>.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #66D9EF;">defun</span> <span style="color: #F92672; font-style: italic;">cider-namespace-refresh</span> ()
  (interactive)
  (cider-interactive-eval
   <span style="color: #E6DB74;">"(require 'clojure.tools.namespace.repl)</span>
<span style="color: #E6DB74;">    (clojure.tools.namespace.repl/refresh)"</span>))

(define-key clojure-mode-map (kbd <span style="color: #E6DB74;">"M-r"</span>) 'cider-namespace-refresh)
</pre>
</div>

<p>
Now <code>M-x cider-namespace-refresh</code>, or simply <code>M-r</code>, will run our Clojure
string and hit the reset button. Job done.
</p>
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">It's Reusable</h2>
<div class="outline-text-2" id="text-2">
<p>
It doesn't take much imagination to see how we can re-use this code.
</p>

<p>
Say this afternoon's development task means you're going to be looking
at the value of an atom a lot. These few lines put viewing that atom a
single keystroke away:
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(define-key clojure-mode-map (kbd <span style="color: #E6DB74;">"M-r"</span>)
  (<span style="color: #66D9EF;">lambda</span> ()
    (interactive)
    (cider-interactive-eval
      <span style="color: #E6DB74;">"(require '[clojure.pprint :refer [pprint]])</span>
<span style="color: #E6DB74;">       (pprint @interesting-atom)"</span>)))
</pre>
</div>

<p>
That's a recipe for a function you can set up in a heartbeat, and throw
away after a much zippier afternoon.
</p>
</div>
</div><img src="http://feeds.feedburner.com/~r/KrisJenkinsBlog/~4/mk08-5OofF8" height="1" width="1"/>