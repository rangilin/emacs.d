<p>There are whopping 4 ways to invoke a lambda (or a proc) in Ruby:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">lambda</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">arg1</span><span class="p">,</span> <span class="n">arg2</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nb">lambda</span><span class="o">[</span><span class="n">arg1</span><span class="p">,</span> <span class="n">arg2</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="nb">lambda</span><span class="o">.</span><span class="p">(</span><span class="n">arg1</span><span class="p">,</span> <span class="n">arg2</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># works only with one argument lambdas</span>
</span><span class='line'><span class="nb">lambda</span> <span class="o">===</span> <span class="n">arg</span>
</span></code></pre></td></tr></table></div></figure>


<p>The last option <code>Proc#===</code> is a special case, that&rsquo;s quite useful
in <a href="http://batsov.com/articles/2013/09/24/lambdas-slash-procs-in-case-expressions/">case expressions</a>,
but should never the used directly.</p>

<p>Of the three general purpose <code>Proc</code> methods that are available (it&rsquo;s
actually just one method with two aliases) I&rsquo;d strongly encourage you
to stick with<code>Proc#call</code>. The reasons are quite simple:</p>

<ul>
<li><p><code>lambda[arg]</code> looks like an index access on some data structure and you&rsquo;d certainly
have to analyze the code context to understand what&rsquo;s going on (especially since the <code>lambda</code> is unlikely to actually be named
<code>lambda</code> in actual code :&ndash;)).</p></li>
<li><p><code>lambda.(arg)</code> is a cute syntactic trick, but it&rsquo;s really easy to overlook the <code>.</code> and assume that this is a normal
method call (which probably was the point when this syntax was introduced). <code>lambda</code>s in Ruby are not real lambdas (they are instances of the <code>Proc</code> class) and we should simply embrace this fact instead of trying to hide it behind awkward syntax.</p></li>
</ul>


<p>I value code clarity and readability immensely and I&rsquo;m not particularly fond of excessive usage of
operator overloading. The use of operators for lambda invocations in Ruby represents the ugly side of operator overloading &ndash;
instead of increasing the readability of the code, the operators actually decrease it.</p>
