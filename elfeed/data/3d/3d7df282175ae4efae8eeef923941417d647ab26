我的學習過程 還記得小時候我和我弟上過一個奇特的數學補習班，叫做「功文數學」。他們的「教學」方法非常特別，不像一般的教室會有一個老師在講台上教課，而是每個人會拿到一疊數學題目，每一面都有數個計算問題，像是「10 x 2 = ?」這樣的問題。每次去功文的任務就是把那一疊題目寫完，寫得越快的人就可以越早回家。那些題目說來沒什麼意思，從頭到尾全都是計算問題，難度從最基本的加減乘除，一直到微積分都有。每次寫完題目後，會有個類似老師的角色，拿出解答本幫你對答案，打上成績。如果在那老師能應付的範圍內，他可能還會跟你說說哪裡犯錯了，下次多加油之類的，但如果到了國高中程度的問題時，老師的作用就只剩對答案而已了。 我之所以說這個補習班很奇妙，原因就在於這個教學過程中，講求的是大量的計算和自我學習的能力。我從加減乘除開始，一路這樣寫到了微積分，寫到後來那邊的老師也沒辦法批改了，乾脆把解答本拿給我們看，讓我們自己看解答學。起初我還覺得這個補習班挺不錯的，只要我做得越快就能越早回家，對小孩子來說是個很好的誘因。而且因為大量的訓練，讓我的計算能力變得非常好，國小國中時的數學考試我都不用準備也能很快寫完交卷。但後來我開始覺得不太對勁，很多題目我雖然知道怎麼算，但我其實不懂為什麼要這麼算，或是這麼算的意義是什麼。可是台灣的考試也不管這個，反正你只要能得到答案，根本沒人在意過程是怎樣。 功文數學的這套方法對訓練計算能力而言很有幫助，因為計算就是需要大量的練習才能變快變好。但問題是，計算能力再好，也是只能算已經定義清楚的問題（也就是考卷上的問題），而無法發現新問題並定義問題，更糟的是還會讓人習慣在沒有完全理解背後的概念時只學得方法快速得到答案。 在我高中開始參加程式比賽後，我用了我熟悉的這套方法訓練自己的程式能力，自己一個人大量的找題目練習。每天從早練到晚，即使沒有人教我也覺得很正常，因為我從小就是這樣自學起來的。這樣練了一年後，我能飛快的寫程式和解題，看到熟悉的題型就能馬上開始敲鍵盤，但同時我也開始覺得寫程式變成一種機械化的過程：看題，解題，寫程式，看題，解題，寫程式&#8230;。跟我從小做數學似乎沒兩樣。 我開始覺得無趣。即使我程式寫得再快再好，也只是解出一個別人設計好的問題而已。 心中的聲音不斷的說：「為什麼我要做別人早就知道答案的問題？」 我想要做沒有人做過的事，看到沒有人看到的問題，再親手解決這些問題。 當我開始這麼想的時候，我正在一邊學著做科展。科展全名是科學展覽，意味著要做點跟科學有關的事來展覽。以前的文章提過，我高三時夢想著要讓電腦自己寫程式，我覺得這是一件沒人做過的事，非常酷，所以我就一直專注在這件事上（其實當時就有很多人在做這種研究了，只是我不知道而已）。但從一開始到我被選上去美國參加國際科展時，我都一直不覺得這件事科學在哪，頂多說是一個工程（或工藝）作品。但選上代表後是有些好處的，台大的歐陽明教授給了我一些指引，讓我知道「科學方法」得測量和量化這個作品的結果，才有客觀的數據可以知道它的作用，進而跟其他相似作品比較好壞，也因此我才開始對「做研究」這件事有點概念。（到這時我才想起來，小時候雖然有做一些物理化學實驗，但從沒人跟我說過這些實驗是有一套標準的方法和流程的，當然也沒人跟我說這件事的價值所在。） 雖然做科展挺有趣的，但同時我也對科學感到失望 &#8211; 因為我意識到科學方法沒辦法幫助我們發明新東西，只能用來評估和檢驗已知事物的好壞。至於所謂的創新科學研究，也是得先提出一個假設(hypothesis)，然後再用這套標準方法去驗證它是否成立。但到底要假設什麼事情呢？科學可沒辦法告訴你。 上大學後，我看到當時處在黃金時代的MIT Media Lab所產出的許多創新研究成果，也開始接觸到設計(design)這個領域。我發現Media Lab的人大多有跨領域的背景，像是設計師+電機工程師、或是音樂家+軟體工程師，他們常看到別人看不到的問題，並提出簡單又優雅的解決方法。我以前一直以為做設計的人講求的是美術天份，但後來深入了解後才發現這是個大誤會。設計的目的是解決問題，跟程式設計師其實沒兩樣，只是用的工具是紙筆或模型罷了。（但一個好的設計通常也都很「美」就是了） 雖然如此，設計師和工程師也有很大的不同。設計師對四周環境和日常生活很敏感，常常得在生活中注意各種細節的不完美之處。但工程師成天泡在電腦中，而且很善於使用其實很難用的介面和程式（像Linux、vi、command line、還有各種程式語言），甚至引以為傲，日子久了也就不覺得這些東西有什麼問題。泡在程式碼中的工程師也一樣，如果習慣了和前人或其他人的大便碼相處，久了也就不覺得臭了。 發現這些現象後，我開始學著跳脫出原本習慣的一切，開始注意生活周遭的各種細節，思考為什麼這個東西當初要這樣設計、這樣做有什麼好處和壞處、有沒有更好的方式之類的問題。之後，當我習慣觀察細節後，慢慢察覺到我習慣用的軟體、工具、環境、程式語言，處處都是設計後的結果，而且充滿可以改進和創新的空間。這些東西都不是沒來由的產物，而是經過某些人思考過後的結果，甚至是經過好幾輪的演化結果。可惜平常在學習或教學的時候，很少人會提到這些歷史淵源和演化過程，以至於這些設計都變成理所當然的存在。但如果我們能仔細觀察平常的事物，進一步思考就會發現很多設計都是為了因應當初時空環境的限制，而這些限制現在不一定存在了，所以我們就會有發揮的空間。 眼光拉遠後，能看到的問題更多了。到了這個階段，能力強的人會覺得能解決的問題也很多。但上天給每個人的時間是一樣多的，這時重要的事情反而又變成：「找出最重要、最根本的問題來解決，而不要被眾多的小問題和小機會所分心，才能產生最大的影響力」。 回顧我的學習過程，我會覺得每一個階段都是一塊基石，一塊塊往上疊以後才會具備該有的能力和經驗做下一階段的事情。舉例來說，要是我一開始沒投入程式比賽的練習累積足夠的實作能力，之後我就沒辦法隨心所欲的寫出我想寫的程式，也沒辦法參加科展體會做沒人做過的事有多麼有趣。之後我可能就會一昧沉浸在鑽研各種流行技術中，或是眼高手低說得一嘴好主意但卻做不出什麼來。 雖然學習是一步一步往上走的，但過程中每件事都有反面的效應，讓我不知道是不是做別的選擇會更好。像是我覺得功文數學浪費了我太多時間在數學計算上，而限制了我在其他方面的發展，但同時它也讓我養成靠自己學習的習慣；參加程式競賽也有類似的效應，雖然增強了我的程式能力，但也讓我錯過正常的高中生活和課程（雖然說到目前為止沒有覺得有什麼負面影響）。 無論如何，我相信在成長的過程中適當的大量練習是必要的。異數(Outliers: The Story of Success)一書的作者Gladwell說要精通一件事情至少需要一萬小時的練習，我相信這是真的。我在高中為了比賽所做的練習起碼就超過五千小時，上大學後輕易就超過一萬小時，但其實我也不覺得我真的精通了什麼。經過大量的練習，本來很難的技巧或技術都會變成一種本能，可以很自然的使用它來從事更高階的應用或是建構更複雜的技術。沒有這些基礎，也就很難站在更高的地方看得更遠想得更多，我也不會走在現在的道路上。<div class="feedflare">
<a href="http://feeds.feedburner.com/~ff/vgod/blog?a=q15fUm2vOrA:8Og5SGnV7qM:yIl2AUoC8zA"><img src="http://feeds.feedburner.com/~ff/vgod/blog?d=yIl2AUoC8zA" border="0"></img></a>
</div><img src="http://feeds.feedburner.com/~r/vgod/blog/~4/q15fUm2vOrA" height="1" width="1"/>