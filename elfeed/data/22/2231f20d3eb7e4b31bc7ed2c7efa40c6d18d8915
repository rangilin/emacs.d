<p>I’ve been really enjoying James Edward Gray II’s <a
href="http://subinterest.com/rubies-in-the-rough">Rubies in the Rough</a> articles. Every couple of weeks, he publishes something that
is guaranteed to get me thinking about some aspect of coding I hadn’t
considered before.</p>

<p>His <a
href="http://subinterest.com/rubies-in-the-rough/10-test-driving-an-algorithm-part-1"> latest
article</a> is part I of an exploration of an algorithm for the <a
href="http://puzzlenode.com/puzzles/11-hitting-rock-bottom">Hitting Rock Bottom</a> problem posed by Gregory Brown &amp; Andrea Singh. At
its core, the problem asks you to simulate pouring water into a 2D
container, filling it using a simple set of rules.</p>

<p>As I was coding up my solution, I found I had code like</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">case</span>
</span><span class='line'>  <span class="k">when</span> <span class="n">cave</span><span class="o">.</span><span class="n">cell_below</span> <span class="o">==</span> <span class="s2">&quot; &quot;</span>        <span class="k">then</span> <span class="n">cave</span><span class="o">.</span><span class="n">move_down</span>
</span><span class='line'>  <span class="k">when</span> <span class="n">cave</span><span class="o">.</span><span class="n">cell_to_the_right</span> <span class="o">==</span> <span class="s2">&quot; &quot;</span> <span class="k">then</span> <span class="n">cave</span><span class="o">.</span><span class="n">move_right</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">cave</span><span class="o">.</span><span class="n">move_up</span>
</span><span class='line'>    <span class="n">cave</span><span class="o">.</span><span class="n">move_left</span> <span class="k">until</span> <span class="n">cave</span><span class="o">.</span><span class="n">cell</span> <span class="o">==</span> <span class="s2">&quot;~&quot;</span>
</span><span class='line'>    <span class="c1"># ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here ” “ is a cell containing air, and ”~” a watery cell. So clearly
we should create some named constants for that:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">AIR</span>   <span class="o">=</span> <span class="s2">&quot; &quot;</span>
</span><span class='line'><span class="no">WATER</span> <span class="o">=</span> <span class="s2">&quot;~&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span>
</span><span class='line'>  <span class="k">when</span> <span class="n">cave</span><span class="o">.</span><span class="n">cell_below</span> <span class="o">==</span> <span class="no">AIR</span>        <span class="k">then</span> <span class="n">cave</span><span class="o">.</span><span class="n">move_down</span>
</span><span class='line'>  <span class="k">when</span> <span class="n">cave</span><span class="o">.</span><span class="n">cell_to_the_right</span> <span class="o">==</span> <span class="no">AIR</span> <span class="k">then</span> <span class="n">cave</span><span class="o">.</span><span class="n">move_right</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">cave</span><span class="o">.</span><span class="n">move_up</span>
</span><span class='line'>    <span class="n">cave</span><span class="o">.</span><span class="n">move_left</span> <span class="k">until</span> <span class="n">cave</span><span class="o">.</span><span class="n">cell</span> <span class="o">==</span> <span class="no">WATER</span>
</span><span class='line'>    <span class="c1"># ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>But it occurred to me that we could use Ruby’s singleton methods to
give AIR and WATER a little smarts:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">WATER</span> <span class="o">=</span> <span class="s2">&quot;~&quot;</span>
</span><span class='line'><span class="no">AIR</span>   <span class="o">=</span> <span class="s2">&quot; &quot;</span>
</span><span class='line'><span class="o">[</span><span class="no">WATER</span><span class="p">,</span> <span class="no">AIR</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">content</span><span class="o">|</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">content</span><span class="o">.</span><span class="nf">in?</span><span class="p">(</span><span class="n">cell</span><span class="p">)</span>
</span><span class='line'>    <span class="n">cell</span> <span class="o">==</span> <span class="nb">self</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># ...</span>
</span><span class='line'><span class="k">case</span>
</span><span class='line'><span class="k">when</span> <span class="no">AIR</span><span class="o">.</span><span class="n">in?</span><span class="p">(</span><span class="n">cave</span><span class="o">.</span><span class="n">cell_below</span><span class="p">)</span>        <span class="k">then</span> <span class="n">cave</span><span class="o">.</span><span class="n">move_down</span>
</span><span class='line'><span class="k">when</span> <span class="no">AIR</span><span class="o">.</span><span class="n">in?</span><span class="p">(</span><span class="n">cave</span><span class="o">.</span><span class="n">cell_to_the_right</span><span class="p">)</span> <span class="k">then</span> <span class="n">cave</span><span class="o">.</span><span class="n">move_right</span>
</span><span class='line'><span class="c1"># ...</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>  <span class="n">cave</span><span class="o">.</span><span class="n">move_left</span> <span class="k">until</span> <span class="no">WATER</span><span class="o">.</span><span class="n">in?</span><span class="p">(</span><span class="n">cave</span><span class="o">.</span><span class="n">cell</span><span class="p">)</span> <span class="k">if</span> <span class="no">AIR</span><span class="o">.</span><span class="n">in?</span><span class="p">(</span><span class="n">cave</span><span class="o">.</span><span class="n">cell</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now you could argue that the cave object should do this: cave.watery?,
or that the individual elements in the cave should be objects that
know their moisture content, rather than simply characters. I don’t
agree with the first (simply because the cave is the container, and
the water/air is the separate stuff that goes into that container). I
have a lot of sympathy for the second, and I’d probably end up there
given a sufficiently large nudge during a refactoring. </p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">WATER</span> <span class="o">=</span> <span class="s2">&quot;~&quot;</span>
</span><span class='line'><span class="no">AIR</span>   <span class="o">=</span> <span class="s2">&quot; &quot;</span>
</span><span class='line'><span class="o">[</span><span class="no">WATER</span><span class="p">,</span> <span class="no">AIR</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">content</span><span class="o">|</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">content</span><span class="o">.</span><span class="nf">in?</span><span class="p">(</span><span class="n">cell</span><span class="p">)</span>
</span><span class='line'>    <span class="n">cell</span> <span class="o">==</span> <span class="nb">self</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># ...</span>
</span><span class='line'><span class="k">case</span>
</span><span class='line'><span class="k">when</span> <span class="no">AIR</span><span class="o">.</span><span class="n">in?</span><span class="p">(</span><span class="n">cave</span><span class="o">.</span><span class="n">cell_below</span><span class="p">)</span>        <span class="k">then</span> <span class="n">cave</span><span class="o">.</span><span class="n">move_down</span>
</span><span class='line'><span class="k">when</span> <span class="no">AIR</span><span class="o">.</span><span class="n">in?</span><span class="p">(</span><span class="n">cave</span><span class="o">.</span><span class="n">cell_to_the_right</span><span class="p">)</span> <span class="k">then</span> <span class="n">cave</span><span class="o">.</span><span class="n">move_right</span>
</span><span class='line'><span class="c1"># ...</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>  <span class="n">cave</span><span class="o">.</span><span class="n">move_left</span> <span class="k">until</span> <span class="no">WATER</span><span class="o">.</span><span class="n">in?</span><span class="p">(</span><span class="n">cave</span><span class="o">.</span><span class="n">cell</span><span class="p">)</span> <span class="k">if</span> <span class="no">AIR</span><span class="o">.</span><span class="n">in?</span><span class="p">(</span><span class="n">cave</span><span class="o">.</span><span class="n">cell</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>But, for the problem at hand, simply decorating the two constants with
a domain method seems to result in code that is a lot more
readable. It isn’t a technique I’d used before, so I thought I’d
share.</p>

<p>(And remember to check out <a
href="http://subinterest.com/rubies-in-the-rough">Rubies in the Rough</a>…)</p>
