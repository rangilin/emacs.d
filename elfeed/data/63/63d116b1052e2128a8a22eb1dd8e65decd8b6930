<p>一開始寫 Puppet 就是 node definition 直接寫寫寫&hellip;後來就會開始把重複的 resource, file 等等拆成 modules&hellip;。不過當機器越來越多，發現還是有許多重複的地方，例如有好多台 web server, 但是他們有些又有些許的不同&hellip;。</p>

<!-- more -->


<h2>Original Style</h2>

<p>先看看傳統的寫法：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>node web {
</span><span class='line'>  include users
</span><span class='line'>  include nginx
</span><span class='line'>  include rails
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>node worker {
</span><span class='line'>  include users
</span><span class='line'>  include rails
</span><span class='line'>  include redis
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>node db {
</span><span class='line'>  include users
</span><span class='line'>  include mysql
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>node web-qa {
</span><span class='line'>  include users
</span><span class='line'>  include nginx
</span><span class='line'>  include rails
</span><span class='line'>  include mysql
</span><span class='line'>  include redis
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>四個看起來還好，但是當機器越來越多的時候，就會感到難以維護了。</p>

<h2>Roles and Profiles Pattern</h2>

<blockquote><p>All problems in computer science can be solved by another level of indirection.</p></blockquote>

<p>所有電腦科學領域的問題都可以用抽象化來解決(除了抽象太多層以外)，以上的問題我們可以用現在常見的 &ldquo;Roles and Profiles Pattern&rdquo; 來做抽象。</p>

<h2>Role</h2>

<p>Role 很好理解，顧名思義就是「扮演的角色」，以上面的例子我們就有 web, db, worker，web 可能又分成 production 環境和 QA 環境。</p>

<p>這邊舉的例子可能太技術取向了，可以想想平常團隊在溝通時，在稱呼某台機器的時候都是怎麼稱呼的：「那台壓影片的」、「那台 QA 環境」&hellip;就很清楚明瞭了。</p>

<p>用這個思路來整理 node 會變成這樣：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>node web {
</span><span class='line'>  include role::web::production
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>node worker {
</span><span class='line'>  include role::worker
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>node db {
</span><span class='line'>  include role::db
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>node web-qa {
</span><span class='line'>  include role::web::qa
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Role 本身大概會長這樣：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class role { 
</span><span class='line'>  include profile::base
</span><span class='line'>}
</span><span class='line'> 
</span><span class='line'>class role::web inherits role { 
</span><span class='line'>  include profile::nginx
</span><span class='line'>}
</span><span class='line'> 
</span><span class='line'>class role::web::production inherits role::web { 
</span><span class='line'>  include profile::nginx::production
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>class role::web::qa inherits role::web { 
</span><span class='line'>  include profile::nginx::qa
</span><span class='line'>  include profile::db
</span><span class='line'>  include profile::worker
</span><span class='line'>}
</span><span class='line'> 
</span><span class='line'>class role::db inherits role { 
</span><span class='line'>  include profile::mysql
</span><span class='line'>}
</span><span class='line'> 
</span><span class='line'>class role::worker inherits role { 
</span><span class='line'>  include profile::worker
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>Profile</h2>

<p>Profile 則是用來抽象化「一組服務、設定」的。看上面 Role 的部份應該有點感覺了：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class profile::base {
</span><span class='line'>  include users
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>class profile::web {
</span><span class='line'>  include nginx
</span><span class='line'>  include rails
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>class profile::web::production inherits profile::web {
</span><span class='line'>  ::nginx::file { 'production.conf':
</span><span class='line'>      content =&gt; ...,
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>class profile::web::qa inherits profile::web {
</span><span class='line'>  ::nginx::file { 'qa.conf':
</span><span class='line'>      content =&gt; ...,
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>class profile::db inherits { 
</span><span class='line'>  include profile::mysql
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>class profile::worker {}
</span><span class='line'>  include rails
</span><span class='line'>  include redis
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>這樣就可以把重複的程式碼減少，同時又保留彈性。</p>

<h2>Tips</h2>

<ul>
<li>一個 node 只 include <em>一個</em> role。如果這兩個 role 很像，但又有些微不同，那就是一個新 role。</li>
<li>一個 role include 一個或多個 profile，而且 <em>只能 include profile</em> 。</li>
</ul>


<h2>Further Reading</h2>

<p>更多詳細細節、優缺點以及不同的設計方式可以參考以下的幾篇連結：</p>

<ul>
<li><a href="http://www.craigdunn.org/2012/05/239/">Designing Puppet – Roles and Profiles</a></li>
<li><a href="http://www.slideshare.net/PuppetLabs/roles-talk">Designing Puppet: Roles/Profiles Pattern</a></li>
<li><a href="http://garylarizza.com/blog/2014/02/17/puppet-workflow-part-2/">Building a Functional Puppet Workflow Part 2: Roles and Profiles</a></li>
<li><a href="http://sysadvent.blogspot.tw/2012/12/day-13-configuration-management-as-legos.html">Configuration Management as Legos</a></li>
</ul>

