<p>
If you use Clojure &amp; Emacs, you probably use <code>ac-nrepl-popup-doc</code> to get
the docs for the thing under the point, in a temporary popup
window. And if you write any Elisp, you might be hankering for the
same thing for Emacs' docs.
</p>

<p>
Here's some code that displays the same text as <code>describe-function</code>, but
in a popup overlay:
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #66D9EF;">require</span> '<span style="color: #AE81FF;">popup</span>)

(<span style="color: #66D9EF;">defun</span> <span style="color: #F92672; font-style: italic;">describe-function-in-popup</span> ()
  (interactive)
  (<span style="color: #66D9EF;">let*</span> ((thing (symbol-at-point))
         (description (<span style="color: #66D9EF;">save-window-excursion</span>
                        (describe-function thing)
                        (switch-to-buffer <span style="color: #E6DB74;">"*Help*"</span>)
                        (buffer-string))))
    (popup-tip description
               <span style="color: #A6E22E;">:point</span> (point)
               <span style="color: #A6E22E;">:around</span> t
               <span style="color: #A6E22E;">:height</span> 30
               <span style="color: #A6E22E;">:scroll-bar</span> t
               <span style="color: #A6E22E;">:margin</span> t)))
</pre>
</div>

<p>
This code is actually fairly simple, so let's break it down:
</p>

<p>
<code>symbol-at-point</code> picks up the thing under the cursor, which should be
the function you're hovering over.
</p>

<p>
The shenannigens inside <code>save-window-excursion</code> is just opening the
regular <code>describe-function</code> window, snarfing its contents, and then
closing it immediately. That puts the help text in <code>description</code>.
</p>

<p>
Then we just call <code>popup-tip</code> to display it. Here's a screenshot:
</p>

<p>
<div class="thumbnail"><img src="/files/describe-function-popup.png" alt="Popup Emacs Help"/></div>
</p>

<p>
You'll probably want to set up your own favourite keybinding, but
here's one example, binding it to <code>M-5</code>:
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(global-set-key (kbd <span style="color: #E6DB74;">"M-5"</span>) 'describe-function-in-popup)
</pre>
</div>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">Update</h2>
<div class="outline-text-2" id="text-1">
<p>
Thanks to a comment from <a href="https://twitter.com/sanityinc">Steve Purcell</a>, we can refine this to work for
variables &amp; faces, not just functions. The big change here is that we
replace <code>describe-function</code> with <code>help-xref-interned</code>.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #66D9EF;">defun</span> <span style="color: #F92672; font-style: italic;">describe-thing-in-popup</span> ()
  (interactive)
  (<span style="color: #66D9EF;">let*</span> ((thing (symbol-at-point))
         (help-xref-following t)
         (description (<span style="color: #66D9EF;">with-temp-buffer</span>
                        (help-mode)
                        (help-xref-interned thing)
                        (buffer-string))))
    (popup-tip description
               <span style="color: #A6E22E;">:point</span> (point)
               <span style="color: #A6E22E;">:around</span> t
               <span style="color: #A6E22E;">:height</span> 30
               <span style="color: #A6E22E;">:scroll-bar</span> t
               <span style="color: #A6E22E;">:margin</span> t)))
</pre>
</div>

<p>
One of the nice things about this change is that help-xref lets us
supply our own temporary buffer, instead of re-using <code>*Help*</code>. That
means we don't clobber anything that's currently in your help buffer.
</p>

<p>
To take advantage of that, we just need to set <code>help-xref-following</code> to
<code>t</code>, and put the temp buffer in <code>help-mode</code>.
</p>
</div>
</div><img src="http://feeds.feedburner.com/~r/KrisJenkinsBlog/~4/D4q_4QGrYUc" height="1" width="1"/>