<p>One of the problems newcomers to Ruby experience is that there are
often quite a few ways to do same thing. For instance &ndash; you can obtain
the number of items in <code>Enumerable</code> objects (instances of classes
using the <code>Enumerable</code> mixin, which would often be collections like
<code>Array</code>, <code>Hash</code>, <code>Set</code>, etc) by either using <code>Enumerable#count</code> or the
methods <code>length</code> and its alias <code>size</code> that such classes often
provide.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">arr</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">arr</span><span class="o">.</span><span class="n">length</span> <span class="c1"># =&gt; 3</span>
</span><span class='line'><span class="n">arr</span><span class="o">.</span><span class="n">size</span> <span class="c1"># =&gt; 3</span>
</span><span class='line'><span class="n">arr</span><span class="o">.</span><span class="n">count</span> <span class="c1"># =&gt; 3</span>
</span><span class='line'>
</span><span class='line'><span class="n">h</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">a</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">b</span><span class="p">:</span> <span class="mi">2</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">h</span><span class="o">.</span><span class="n">length</span> <span class="c1"># =&gt; 2</span>
</span><span class='line'><span class="n">h</span><span class="o">.</span><span class="n">size</span> <span class="c1"># =&gt; 2</span>
</span><span class='line'><span class="n">h</span><span class="o">.</span><span class="n">count</span> <span class="c1"># =&gt; 2</span>
</span><span class='line'>
</span><span class='line'><span class="n">str</span> <span class="o">=</span> <span class="s1">&#39;name&#39;</span>
</span><span class='line'><span class="n">str</span><span class="o">.</span><span class="n">length</span> <span class="c1"># =&gt; 4</span>
</span><span class='line'><span class="n">str</span><span class="o">.</span><span class="n">size</span> <span class="c1"># =&gt; 4</span>
</span><span class='line'><span class="c1"># str.count won&#39;t work as String does not include Enumerable</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which one should you use? Let me help with this choice.</p>

<p><code>length</code> is a method that&rsquo;s not part of <code>Enumerable</code> &ndash; it&rsquo;s part of a
concrete class (like <code>String</code> or <code>Array</code>) and it&rsquo;s usually running in
<code>O(1)</code> (constant) time. That&rsquo;s as fast as it gets, which means that
using it is probably a good idea.</p>

<p>Whether you should use <code>length</code> or <code>size</code> is mostly a matter of
personal preference.  Personally I use <code>size</code> for collections (hashes,
arrays, etc) and <code>length</code> for strings, since for me objects like
hashes and stacks don&rsquo;t have a length, but a size (defined in terms of
the elements they contain). Conversely, it&rsquo;s perfectly normal to
assume that some text has some length. Anyways, in the end you&rsquo;re
invoking the same method, so the semantic distinction is not
important.</p>

<p><code>Enumerable#count</code>, on the other hand, is a totally different
beast. It&rsquo;s usually meant to be used with a block or an argument and
will return the number of matches in an <code>Enumerable</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">arr</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">8</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">arr</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:even?</span><span class="p">)</span> <span class="c1"># =&gt; 3</span>
</span><span class='line'><span class="n">arr</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="c1"># =&gt; 2</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can, however, invoke it without any arguments and it will return the size of the enumerable on which it was invoked:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">arr</span><span class="o">.</span><span class="n">count</span> <span class="c1"># =&gt; 7</span>
</span></code></pre></td></tr></table></div></figure>


<p>There&rsquo;s a performance implication with this, though &ndash; to calculate the
size of the enumerable the <code>count</code> method will traverse it, which is
not particularly fast (especially for huge collections). Some classes
(like <code>Array</code>) implement an optimized version of <code>count</code> in terms of
<code>length</code>, but many don&rsquo;t.</p>

<p>The takeaway for you is that you should
avoid using the <code>count</code> method if you can use <code>length</code> or <code>size</code>.</p>

<p>A note to Rails developers &ndash; <code>ActiveRecord::Relation</code>&rsquo;s <code>length</code>,
<code>size</code> and <code>count</code> methods have a totally different meaning, but that&rsquo;s
irrelevant to our current discussion. (<code>Sean Griffin</code> has written
<a href="http://batsov.com/articles/2014/02/17/the-elements-of-style-in-ruby-number-13-length-vs-size-vs-count/#comment-1248998887">a comment regarding it</a>).</p>

<p>That&rsquo;s all for now, folks! As usual I&rsquo;m looking forward to hearing your thoughts here and on
<a href="http://twitter.com/bbatsov">Twitter</a>!</p>
