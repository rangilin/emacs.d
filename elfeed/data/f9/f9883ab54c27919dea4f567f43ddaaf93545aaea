<p>On Reddit a user asked <a href="http://de.reddit.com/r/emacs/comments/29jp7c/autoload_questions_what_functions_should_i/">how to use autoloads in Emacs Lisp</a>. This post is essentially a summary and extension of my answers in that thread, but since this topic is of interest to almost every Emacs Lisp developer, I thought I’d share them to a wider audience.</p>
<h1 id="autoloads">Autoloads</h1>
<p>Emacs Lisp offers an <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Autoload.html#Autoload">autoloading mechanism</a> to load libraries on demand. Typically this is used to make interactive commands available to the user without entirely loading the corresponding library upfront.</p>
<p>Autoloads are created with the <a href="http://doc.endlessparentheses.com/Fun/autoload">autoload</a> function. An autoload for the function <code>magit-status</code> in the library <code>magit.el</code> would look like this:</p>
<div class="highlight"><pre><span class="p">(</span><span class="nv">autoload</span> <span class="ss">&#39;magit-status</span> <span class="s">&quot;magit&quot;</span> <span class="s">&quot;Open a Magit status buffer […]&quot;</span> <span class="no">t</span> <span class="no">nil</span><span class="p">)</span>
</pre></div>

<p><strong>Evaluating</strong> this expression tells Emacs to automatically load the library <code>magit.el</code> from <code>load-path</code>, when <code>magit-status</code> is called—either from Lisp, or interactively with <code>M-x magit-status</code>—with no definition of this function yet available. You can add such autoloads to your <code>init.el</code> yourself in order to autoload 3rd party libraries. In the old days before package.el, this was very common.</p>
<p>Note the emphasis on <strong>evaluation</strong>. No autoloads are established by merely writing this expression somewhere. Emacs must evaluate it, which essentially means that Emacs loads a file which contains this expression.</p>
<p>Now obviously it doesn’t make any sense to put autoloads into the very same file that also contains the definition of the autoloaded function. Emacs would load the rest of the file as well along with the autoload, which makes the definition available right away and leads the purpose of autoloads ad absurdum.</p>
<h1 id="autoload-files">Autoload files</h1>
<p>Hence autoloads should be in a separate file, which ideally contains only autoloads, and little else, so that it loads very fast. Emacs calls these files “autoload files”.</p>
<h1 id="autoload-cookies">Autoload cookies</h1>
<p>Manually maintaining autoload files to keep them in sync with the actual definitions is tiresome and error-prone, so Emacs provides <a href="http://doc.endlessparentheses.com/Fun/update-file-autoloads">update-file-autoloads</a> and <a href="http://doc.endlessparentheses.com/Fun/update-directory-autoloads">update-directory-autoloads</a> to automate this process.</p>
<p><code>update-file-autoloads</code> inspects the source files for special comments called “autoload cookies”. These cookies let you declare autoloads right at the corresponding definition. An autoload cookie for <code>magit-status</code> looks like this:</p>
<div class="highlight"><pre><span class="c1">;;;###autoload</span>
<span class="p">(</span><span class="nb">defun</span> <span class="nv">magit-status</span> <span class="p">()</span>
  <span class="s">&quot;Open a Magit status buffer […]&quot;</span>
  <span class="p">(</span><span class="nv">interactive</span><span class="p">)</span>
  <span class="c1">;; …</span>
<span class="p">)</span>
</pre></div>

<p>For each such cookie <code>update-file-autoloads</code> generates a corresponding <code>autoload</code> like the one shown above, and writes it to the autoload file. <code>update-directory-autoloads</code> performs this process for all files in a directory.</p>
<p>Note that these commands only <strong>generate</strong> autoload files. You still need to <strong>explicitly load</strong> the generated files to actually create the autoloads therein.</p>
<p>If an autoload cookie occurs on an expression with no special support for autoloading, <code>update-file-autoloads</code> copies the expression verbatim. This is used to register libraries in specific Emacs extension points, like <code>auto-modes-alist</code>.</p>
<h1 id="package-autoloads">Package autoloads</h1>
<p>Emacs’ package manager <code>package.el</code> goes a step further still, and completely automates autoloads by automatically generating autoload files during package installation (using <code>update-directory-autoloads</code> internally). This saves package maintainers the tedious work of manually updating autoload files and including them in their packages, and enables autoloads even for single-file packages<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a>.</p>
<p>These autoload files are automatically loaded by <code>package-initialize</code>, which is typically called when Emacs starts. Hence, all code in the autoload files, whether real autoloads or arbitrary expressions is loaded at startup.</p>
<h1 id="what-to-autoload">What to autoload?</h1>
<p>The general rule is to autoload <strong>interactive “entry points”</strong> of a package. Examples of interactive entry points are:</p>
<ul>
<li>definitions of major and minor modes,</li>
<li>interactive commands by which a user would start to use a specific package (e.g. <code>gnus</code>, <code>erc</code>, <code>magit-status</code>, etc.),</li>
<li>and interactive commands which provide generic utilities, e.g. <code>occur</code>, <code>find</code>, <code>ace-jump-mode</code>, etc.</li>
</ul>
<p>If your package just provides a library for use in Emacs Lisp code (e.g. like dash.el or s.el), you do not need to add any autoloads at all. Libraries are typically <code>required</code>d, so autoloads are not necessary.</p>
<p>If your package should automatically register itself in specific Emacs extension points, you should add autoloads for these as well, to make sure that they are evaluated during package initialization. A typical example is adding a mode to <code>auto-mode-alist</code>:</p>
<div class="highlight"><pre><span class="c1">;;;###autoload</span>
<span class="p">(</span><span class="nv">add-to-list</span> <span class="ss">&#39;auto-mode-alist</span> <span class="o">&#39;</span><span class="p">(</span><span class="s">&quot;\\.pp\\&#39;&quot;</span> <span class="o">.</span> <span class="nv">puppet-mode</span><span class="p">))</span>
</pre></div>

<p>This puts <code>puppet-mode</code> into <code>auto-mode-alist</code> when Emacs starts, so that Puppet Mode is automatically used for all files ending in <code>.pp</code>.</p>
<p>Likewise, colour themes use autoload cookies to add themselves to the color theme search path:</p>
<div class="highlight"><pre><span class="c1">;;;###autoload</span>
<span class="p">(</span><span class="nb">when</span> <span class="p">(</span><span class="nb">and</span> <span class="p">(</span><span class="nb">boundp</span> <span class="ss">&#39;custom-theme-load-path</span><span class="p">)</span> <span class="nv">load-file-name</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">add-to-list</span> <span class="ss">&#39;custom-theme-load-path</span>
               <span class="p">(</span><span class="nv">file-name-as-directory</span> <span class="p">(</span><span class="nv">file-name-directory</span> <span class="nv">load-file-name</span><span class="p">))))</span>
</pre></div>

<h1 id="emacs-lisp-api-for-autoloads">Emacs Lisp API for autoloads</h1>
<p>Emacs Lisp has some functions to work with autoloads. In addition to <a href="http://doc.endlessparentheses.com/Fun/autoload">autoload</a> to create autoloads, there are <a href="http://doc.endlessparentheses.com/Fun/autoloadp">autoloadp</a> and <a href="http://doc.endlessparentheses.com/Fun/autoload-do-load">autoload-do-load</a>. The first lets you check whether an object is an autoload object, and the latter loads the underlying library of an autoload.</p>
<p>Note that both functions work on <strong>autoload objects</strong>, and <strong>not</strong> on symbols with attached autoloads. Hence, <code>(autoloadp 'foo)</code> checks whether the symbol <code>foo</code> is autoloaded, which it obviously isn’t: Symbols are not loaded at all. They are directly created by the reader, or explicitly with <a href="http://doc.endlessparentheses.com/Fun/intern">intern</a>.</p>
<p>To check, whether <code>foo</code> refers to an autoloaded function, you need to check the <em>function definition</em> of <code>foo</code>:</p>
<div class="highlight"><pre><span class="p">(</span><span class="nv">autoloadp</span> <span class="p">(</span><span class="nv">function-definition</span> <span class="ss">&#39;foo</span><span class="p">))</span>
</pre></div>

<section class="footnotes">
<hr />
<ol>
<li id="fn1"><p>Single file packages are standalone Emacs Lisp files with special file headers.<a href="#fnref1">↩</a></p></li>
</ol>
</section>