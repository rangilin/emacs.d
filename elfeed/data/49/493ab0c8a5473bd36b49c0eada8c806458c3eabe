<p>People are often confused about the fact that there are two ways to created <code>proc</code>s in Ruby &ndash;
via <code>Kernel#proc</code> and <code>Proc.new</code>. Let&rsquo;s see them in action:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="kp">true</span> <span class="p">}</span>
</span><span class='line'><span class="c1"># =&gt; #&lt;Proc:0x007fe35440a058&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">proc</span> <span class="p">{</span> <span class="kp">true</span> <span class="p">}</span>
</span><span class='line'><span class="c1"># =&gt; #&lt;Proc:0x007fe35440a059&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hmmm, it seems we get exactly the same results&hellip; While this is true
on Ruby 1.9+, this was not always the case.</p>

<p>In Ruby 1.8, <code>Kernel#proc</code> is actually a synonym for <code>Kernel#lambda</code>
which was extremely confusing, since as we all know <code>lambda</code>s an
<code>proc</code>s differ in
<a href="http://stackoverflow.com/questions/626/when-to-use-lambda-when-to-use-proc-new">subtle ways</a>. Luckily
sanity prevailed and Ruby 1.9 made <code>Kernel#proc</code> a synonym for
<code>Proc.new</code> instead.</p>

<p>At this point, however, people couldn&rsquo;t use <code>Kernel#proc</code> anymore if they
wanted to write code that&rsquo;s behaving in the same way on both Ruby 1.8
and Ruby 1.9 and the use of <code>Kernel#proc</code> was generally discouraged.
Thankfully Ruby 1.8 is now dead and buried and there&rsquo;s no reason to prefer
<code>Proc.new</code> over <code>Kernel#proc</code> anymore.  As a matter of fact &ndash; you
should probably be using only <code>Kernel#proc</code> as it&rsquo;s more concise and
it&rsquo;s symmetrical to <code>Kernel#lambda</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">lambda</span> <span class="p">{</span> <span class="kp">true</span> <span class="p">}</span>
</span><span class='line'><span class="c1"># =&gt; #&lt;Proc:0x007fe35440a058 (lambda)&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">proc</span> <span class="p">{</span> <span class="kp">true</span> <span class="p">}</span>
</span><span class='line'><span class="c1"># =&gt; #&lt;Proc:0x007fe35440a059&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>By the way, given <code>proc</code>&rsquo;s fairly counter-intuitive behavior regarding <code>return</code>, you should probably
use <code>lambda</code>s most of the time.</p>
