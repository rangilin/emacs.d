<p>While <a href="/2014/07/26/make-your-emacs-mode-line-more-useful.html">re-designing my Emacs mode line recently</a>, I realized that the way <a href="http://flycheck.readthedocs.org">Flycheck</a> used the mode line had been quite wrong all the time.</p>
<p>This post shows what was wrong in Flycheck, and how it was fixed. I hope that this helps other Emacs developers to avoid the same mistake. I’ll also show you how my personal Flycheck mode line now looks like, to show you how proper mode line support enables customizations that were simply impossible before.</p>
<h1 id="dynamic-content-in-the-mode-line">Dynamic content in the mode line</h1>
<p>Like every other mode in Emacs, Flycheck has a mode line “lighter” that indicates the mode in the mode line. For most minor modes, the ligher is just a simple string, for instance in <a href="https://github.com/purcell/elisp-slime-nav">Emacs Lisp Slime Nav</a>:</p>
<div class="highlight"><pre><span class="p">(</span><span class="nv">define-minor-mode</span> <span class="nv">elisp-slime-nav-mode</span>
  <span class="s">&quot;Enable Slime-style navigation of elisp symbols using M-. and M-,&quot;</span>
  <span class="ss">:init-value</span>
  <span class="ss">:lighter</span> <span class="s">&quot; SliNav&quot;</span>
  <span class="ss">:keymap</span> <span class="nv">elisp-slime-nav-mode-map</span><span class="p">)</span>
</pre></div>

<p>A constant mode line text isn’t sufficient for Flycheck, however: Flycheck should report the number of errors and warnings in the mode line, as well as the general state of its syntax checking. Fortunately, mode line lighters can also be variables:</p>
<div class="highlight"><pre><span class="p">(</span><span class="nv">define-minor-mode</span> <span class="nv">flycheck-mode</span>
  <span class="s">&quot;Minor mode for on-the-fly syntax checking.&quot;</span>
  <span class="ss">:init-value</span> <span class="no">nil</span>
  <span class="ss">:keymap</span> <span class="nv">flycheck-mode-map</span>
  <span class="ss">:lighter</span> <span class="nv">flycheck-mode-line</span>
  <span class="c1">;; …</span>
  <span class="p">)</span>
</pre></div>

<p>With this setup, Emacs will use the value of <code>flycheck-mode-line</code> as mode line text for Flycheck Mode whenever it updates the mode line.</p>
<h1 id="dynamic-mode-line-done-wrong">Dynamic mode line done wrong</h1>
<p>In the past, <code>flycheck-mode-line</code> was a <em>buffer-local</em> variable, and Flycheck would explicitly set this variable whenever the status of Flycheck in the current buffer changed. For instance, after a syntax check Flycheck called <code>flycheck-report-error-count</code> with all errors in the current buffer to update the mode line with the amount of errors and warnings:</p>
<div class="highlight"><pre><span class="p">(</span><span class="nb">defun</span> <span class="nv">flycheck-report-status</span> <span class="p">(</span><span class="nv">status</span><span class="p">)</span>
  <span class="s">&quot;Report Flycheck STATUS.&quot;</span>
  <span class="p">(</span><span class="k">setq</span> <span class="nv">flycheck-mode-line</span> <span class="p">(</span><span class="nv">concat</span> <span class="nv">flycheck-mode-line-lighter</span> <span class="nv">status</span><span class="p">))</span>
  <span class="p">(</span><span class="nv">force-mode-line-update</span><span class="p">))</span>

<span class="p">(</span><span class="nb">defun</span> <span class="nv">flycheck-report-error-count</span> <span class="p">(</span><span class="nv">errors</span><span class="p">)</span>
  <span class="s">&quot;Report ERRORS in the current buffer.</span>

<span class="s">Report a proper flycheck status.&quot;</span>
  <span class="p">(</span><span class="k">if</span> <span class="nv">errors</span>
      <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">error-counts</span> <span class="p">(</span><span class="nv">flycheck-count-errors</span> <span class="nv">errors</span><span class="p">)))</span>
        <span class="p">(</span><span class="nv">flycheck-report-status</span>
         <span class="p">(</span><span class="nb">format</span> <span class="s">&quot;:%s/%s&quot;</span>
                 <span class="p">(</span><span class="nb">or</span> <span class="p">(</span><span class="nb">cdr</span> <span class="p">(</span><span class="nv">assq</span> <span class="ss">&#39;error</span> <span class="nv">error-counts</span><span class="p">))</span> <span class="mi">0</span><span class="p">)</span>
                 <span class="p">(</span><span class="nb">or</span> <span class="p">(</span><span class="nb">cdr</span> <span class="p">(</span><span class="nv">assq</span> <span class="ss">&#39;warning</span> <span class="nv">error-counts</span><span class="p">))</span> <span class="mi">0</span><span class="p">))))</span>
    <span class="p">(</span><span class="nv">flycheck-report-status</span> <span class="s">&quot;&quot;</span><span class="p">)))</span>
</pre></div>

<p>As you can see, this code sets <code>flycheck-mode-line</code> to a <em>fixed</em> string. There is no way to customize the contents or appearance of Flycheck’s mode line text, or to disable mode line reporting completely. There must be a better way, and in fact there is.</p>
<h1 id="customizable-mode-line-lighter">Customizable mode line lighter</h1>
<p>Mode line lighters can be more than just simple strings: In fact, they are valid <a href="http://www.gnu.org/software/emacs/manual/html_node/elisp/Mode-Line-Data.html">mode line constructs</a> on their own. Mode line constructs are very versatile, and can encode text properties, conditional content, and most notably, the result of arbitrary expressions, via the <code>(:eval FORM)</code> construct.</p>
<p>Since commit <a href="https://github.com/flycheck/flycheck/commit/2d1511012d7acbfc078decac0b08d7733bf954ae">2d15110</a> <code>flycheck-mode-line</code> is now a customizable mode line construct, whose default value is an <code>(:eval FORM)</code> construct that creates the same mode line text as before:</p>
<div class="highlight"><pre><span class="p">(</span><span class="nv">defcustom</span> <span class="nv">flycheck-mode-line</span>
  <span class="o">&#39;</span><span class="p">(</span><span class="ss">:eval</span> <span class="p">(</span><span class="nv">flycheck-mode-line-status-text</span><span class="p">))</span>
  <span class="s">&quot;Mode line lighter for Flycheck.&quot;</span>
  <span class="ss">:group</span> <span class="ss">&#39;flycheck</span>
  <span class="ss">:type</span> <span class="ss">&#39;sexp</span>
  <span class="ss">:risky</span> <span class="no">t</span><span class="p">)</span>
</pre></div>

<p>Flycheck <em>never</em> sets the value of this variable now. Instead it just calls <code>force-mode-line-update</code> whenever the status of Flycheck changes. This causes Emacs to re-draw the mode line of the corresponding buffer, which in turn evaluates all mode line constructs, including the one in <code>flycheck-mode-line</code>.</p>
<p>The default value of <code>flycheck-mode-line</code> uses <code>(:eval FORM)</code> to call the new function <code>flycheck-mode-line-status-text</code>, which returns a human-readable status text for the current Flycheck status. The functionality is still the same, but unlike before, it’s now entirely customizable and even be completely disabled:</p>
<div class="highlight"><pre><span class="p">(</span><span class="nb">defun</span> <span class="nv">flycheck-mode-line-status-text</span> <span class="p">(</span><span class="k">&amp;optional</span> <span class="nv">status</span><span class="p">)</span>
  <span class="s">&quot;Get a text describing STATUS for use in the mode line.</span>

<span class="s">STATUS defaults to `flycheck-last-status-change&#39; if omitted or</span>
<span class="s">nil.&quot;</span>
  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">text</span> <span class="p">(</span><span class="nv">pcase</span> <span class="p">(</span><span class="nb">or</span> <span class="nv">status</span> <span class="nv">flycheck-last-status-change</span><span class="p">)</span>
                <span class="p">(</span><span class="o">`</span><span class="nv">not-checked</span> <span class="s">&quot;&quot;</span><span class="p">)</span>
                <span class="p">(</span><span class="o">`</span><span class="nv">no-checker</span> <span class="s">&quot;-&quot;</span><span class="p">)</span>
                <span class="p">(</span><span class="o">`</span><span class="nv">running</span> <span class="s">&quot;*&quot;</span><span class="p">)</span>
                <span class="p">(</span><span class="o">`</span><span class="nv">errored</span> <span class="s">&quot;!&quot;</span><span class="p">)</span>
                <span class="p">(</span><span class="o">`</span><span class="nv">finished</span>
                 <span class="p">(</span><span class="k">if</span> <span class="nv">flycheck-current-errors</span>
                     <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">error-counts</span> <span class="p">(</span><span class="nv">flycheck-count-errors</span>
                                          <span class="nv">flycheck-current-errors</span><span class="p">)))</span>
                       <span class="p">(</span><span class="nb">format</span> <span class="s">&quot;:%s/%s&quot;</span>
                               <span class="p">(</span><span class="nb">or</span> <span class="p">(</span><span class="nb">cdr</span> <span class="p">(</span><span class="nv">assq</span> <span class="ss">&#39;error</span> <span class="nv">error-counts</span><span class="p">))</span> <span class="mi">0</span><span class="p">)</span>
                               <span class="p">(</span><span class="nb">or</span> <span class="p">(</span><span class="nb">cdr</span> <span class="p">(</span><span class="nv">assq</span> <span class="ss">&#39;warning</span> <span class="nv">error-counts</span><span class="p">))</span> <span class="mi">0</span><span class="p">)))</span>
                   <span class="s">&quot;&quot;</span><span class="p">))</span>
                <span class="p">(</span><span class="o">`</span><span class="nv">interrupted</span> <span class="s">&quot;-&quot;</span><span class="p">)</span>
                <span class="p">(</span><span class="o">`</span><span class="nv">suspicious</span> <span class="s">&quot;?&quot;</span><span class="p">))))</span>
    <span class="p">(</span><span class="nv">concat</span> <span class="s">&quot; FlyC&quot;</span> <span class="nv">text</span><span class="p">)))</span>
</pre></div>

<h1 id="my-personal-flycheck-mode-line">My personal Flycheck mode line</h1>
<p>To demonstrate what this enables you to do, I’d like to share my own mode line setup:</p>
<div class="highlight"><pre><span class="p">(</span><span class="k">setq</span> <span class="nv">flycheck-mode-line</span>
      <span class="o">&#39;</span><span class="p">(</span><span class="ss">:eval</span>
        <span class="p">(</span><span class="nv">pcase</span> <span class="nv">flycheck-last-status-change</span>
          <span class="p">(</span><span class="o">`</span><span class="nv">not-checked</span> <span class="no">nil</span><span class="p">)</span>
          <span class="p">(</span><span class="o">`</span><span class="nv">no-checker</span> <span class="p">(</span><span class="nv">propertize</span> <span class="s">&quot; -&quot;</span> <span class="ss">&#39;face</span> <span class="ss">&#39;warning</span><span class="p">))</span>
          <span class="p">(</span><span class="o">`</span><span class="nv">running</span> <span class="p">(</span><span class="nv">propertize</span> <span class="s">&quot; ✷&quot;</span> <span class="ss">&#39;face</span> <span class="ss">&#39;success</span><span class="p">))</span>
          <span class="p">(</span><span class="o">`</span><span class="nv">errored</span> <span class="p">(</span><span class="nv">propertize</span> <span class="s">&quot; !&quot;</span> <span class="ss">&#39;face</span> <span class="ss">&#39;error</span><span class="p">))</span>
          <span class="p">(</span><span class="o">`</span><span class="nv">finished</span>
           <span class="p">(</span><span class="k">let*</span> <span class="p">((</span><span class="nv">error-counts</span> <span class="p">(</span><span class="nv">flycheck-count-errors</span> <span class="nv">flycheck-current-errors</span><span class="p">))</span>
                  <span class="p">(</span><span class="nv">no-errors</span> <span class="p">(</span><span class="nb">cdr</span> <span class="p">(</span><span class="nv">assq</span> <span class="ss">&#39;error</span> <span class="nv">error-counts</span><span class="p">)))</span>
                  <span class="p">(</span><span class="nv">no-warnings</span> <span class="p">(</span><span class="nb">cdr</span> <span class="p">(</span><span class="nv">assq</span> <span class="ss">&#39;warning</span> <span class="nv">error-counts</span><span class="p">)))</span>
                  <span class="p">(</span><span class="nv">face</span> <span class="p">(</span><span class="nb">cond</span> <span class="p">(</span><span class="nv">no-errors</span> <span class="ss">&#39;error</span><span class="p">)</span>
                              <span class="p">(</span><span class="nv">no-warnings</span> <span class="ss">&#39;warning</span><span class="p">)</span>
                              <span class="p">(</span><span class="no">t</span> <span class="ss">&#39;success</span><span class="p">))))</span>
             <span class="p">(</span><span class="nv">propertize</span> <span class="p">(</span><span class="nb">format</span> <span class="s">&quot; %s/%s&quot;</span> <span class="p">(</span><span class="nb">or</span> <span class="nv">no-errors</span> <span class="mi">0</span><span class="p">)</span> <span class="p">(</span><span class="nb">or</span> <span class="nv">no-warnings</span> <span class="mi">0</span><span class="p">))</span>
                         <span class="ss">&#39;face</span> <span class="nv">face</span><span class="p">)))</span>
          <span class="p">(</span><span class="o">`</span><span class="nv">interrupted</span> <span class="s">&quot; -&quot;</span><span class="p">)</span>
          <span class="p">(</span><span class="o">`</span><span class="nv">suspicious</span> <span class="o">&#39;</span><span class="p">(</span><span class="nv">propertize</span> <span class="s">&quot; ?&quot;</span> <span class="ss">&#39;face</span> <span class="ss">&#39;warning</span><span class="p">)))))</span>
</pre></div>

<p>It uses mostly the same text as the standard value, but goes without the name of the mode: Flycheck has a fixed place in my mode line, outside of the standard minor mode list, and I don’t need to see its name. Unlike the standard value, however, my setup makes heavy use of colors, to quickly give me an idea of the buffer’s state with just a single glance.</p>
<p>Feel free to use this as inspiration for your own setup, which may include all sort of fancy stuff. How about a little pirates flair by showing errors with ☠?</p>