<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Chicken:</h2>
<div class="outline-text-2" id="text-1">
<div class="org-src-container">

<pre class="src src-clojure">(<span style="color: #ae81ff;">require</span> '[clojure.walk <span style="color: #fd971f;">:as</span> walk]
         '[clojure.pprint <span style="color: #fd971f;">:refer</span> [pprint]]
         '[clojure.string <span style="color: #fd971f;">:refer</span> [replace]])

(<span style="color: #f92672;">defn</span> <span style="color: #a6e22e;">chicken</span>
  [form]
  (walk/<span style="color: #66d9ef;">postwalk</span> (<span style="color: #f92672;">fn</span> [x]
                   (<span style="color: #f92672;">cond</span>
                    (<span style="color: #ae81ff;">=</span> x '&amp;) x
                    (<span style="color: #ae81ff;">string?</span> x) (<span style="color: #ae81ff;">replace</span> x
                                         #<span style="color: #e6db74;">"\w+"</span>
                                         <span style="color: #e6db74;">"chicken"</span>)
                    (<span style="color: #ae81ff;">symbol?</span> x) 'chicken
                    <span style="color: #fd971f;">:else</span> x))
                 form))
</pre>
</div>
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Chicken chicken:</h2>
<div class="outline-text-2" id="text-2">
<div class="org-src-container">

<pre class="src src-clojure">(pprint
 (chicken
  '(<span style="color: #f92672;">defn</span> <span style="color: #a6e22e;">alter-map-values</span>
     <span style="color: #e6db74;">"Given a map, derive a new one where all the keys are passed through f.</span>
<span style="color: #e6db74;">      If f returns nil, the key is unchanged."</span>
     [f m]
     (<span style="color: #ae81ff;">reduce</span> (<span style="color: #f92672;">fn</span> [altered [k v]]
               (<span style="color: #ae81ff;">assoc</span> altered
                 k (<span style="color: #f92672;">or</span> (f v) v)))
             {}
             m))))
</pre>
</div>
</div>
</div>
<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> Chicken, Chicken, Chicken:</h2>
<div class="outline-text-2" id="text-3">
<div class="org-src-container">

<pre class="src src-clojure">(chicken
 chicken
 <span style="color: #e6db74;">"chicken chicken chicken, chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken.</span>
<span style="color: #e6db74;">  chicken chicken chicken chicken, chicken chicken chicken chicken."</span>
 [chicken chicken]
 (chicken
  (chicken
   [chicken [chicken chicken]]
   (chicken chicken chicken (chicken (chicken chicken) chicken)))
  {}
  chicken))
</pre>
</div>
</div>
</div>
<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> Chickens:</h2>
<div class="outline-text-2" id="text-4">
<p>
<a href="http://www.youtube.com/watch?v=yL_-1d9OSdk">Chicken</a>
</p>

<p>
<a href="http://blog.fogus.me/2013/07/17/an-introduction-to-deep-code-walking-macros-with-clojure/">Chicken Chicken</a>
</p>
</div>
</div><img src="http://feeds.feedburner.com/~r/KrisJenkinsBlog/~4/TlnkhdoCVWI" height="1" width="1"/>