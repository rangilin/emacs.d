<p>
Emacs is an intelligent editor in more ways than one. Instead of
hardcoding its movement functions (such as <a href="http://doc.endlessparentheses.com/Fun/end-of-defun"><code>end-of-defun</code></a> or
<a href="http://doc.endlessparentheses.com/Fun/forward-paragraph"><code>forward-paragraph</code></a>), they're implemented in terms of delimiters which
are configured by each major-mode. It works beautifully for functions,
but it feels like a stone in my shoe for paragraphs.
</p>

<p>
Say what you will, but a paragraph delimiter is a blank line.
Whichever mode I'm in, that's where I expect to go when I hit
<kbd>M-e</kbd> and it annoys me to no end when some
major-mode changes that.
</p>
<div class="highlight"><pre><code class="language-cl" data-lang="cl"><span class="p">(</span><span class="nv">global-set-key</span> <span class="s">&quot;\M-a&quot;</span> <span class="ss">&#39;endless/backward-paragraph</span><span class="p">)</span>
<span class="p">(</span><span class="nv">global-set-key</span> <span class="s">&quot;\M-e&quot;</span> <span class="ss">&#39;endless/forward-paragraph</span><span class="p">)</span>

<span class="p">(</span><span class="nb">defun</span> <span class="nv">endless/forward-paragraph</span> <span class="p">(</span><span class="k">&amp;optional</span> <span class="nv">n</span><span class="p">)</span>
  <span class="s">&quot;Advance just past next blank line.&quot;</span>
  <span class="p">(</span><span class="nv">interactive</span> <span class="s">&quot;p&quot;</span><span class="p">)</span>
  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">para-commands</span>
         <span class="o">&#39;</span><span class="p">(</span><span class="nv">endless/forward-paragraph</span> <span class="nv">endless/backward-paragraph</span><span class="p">)))</span>
    <span class="c1">;; Only push mark if it&#39;s not active and we&#39;re not repeating.</span>
    <span class="p">(</span><span class="nb">or</span> <span class="p">(</span><span class="nv">use-region-p</span><span class="p">)</span>
        <span class="p">(</span><span class="nb">not</span> <span class="p">(</span><span class="nb">member</span> <span class="nv">this-command</span> <span class="nv">para-commands</span><span class="p">))</span>
        <span class="p">(</span><span class="nb">member</span> <span class="nv">last-command</span> <span class="nv">para-commands</span><span class="p">)</span>
        <span class="p">(</span><span class="nv">push-mark</span><span class="p">))</span>
    <span class="c1">;; The actual movement.</span>
    <span class="p">(</span><span class="nb">dotimes</span> <span class="p">(</span><span class="nv">_</span> <span class="p">(</span><span class="nb">abs</span> <span class="nv">n</span><span class="p">))</span>
      <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">&gt;</span> <span class="nv">n</span> <span class="mi">0</span><span class="p">)</span>
          <span class="p">(</span><span class="nv">skip-chars-forward</span> <span class="s">&quot;\n[:blank:]&quot;</span><span class="p">)</span>
        <span class="p">(</span><span class="nv">skip-chars-backward</span> <span class="s">&quot;\n[:blank:]&quot;</span><span class="p">))</span>
      <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nv">search-forward-regexp</span>
           <span class="s">&quot;\n[[:blank:]]*\n[[:blank:]]*&quot;</span> <span class="no">nil</span> <span class="no">t</span> <span class="p">(</span><span class="nv">cl-signum</span> <span class="nv">n</span><span class="p">))</span>
          <span class="p">(</span><span class="nv">goto-char</span> <span class="p">(</span><span class="nv">match-end</span> <span class="mi">0</span><span class="p">))</span>
        <span class="p">(</span><span class="nv">goto-char</span> <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">&gt;</span> <span class="nv">n</span> <span class="mi">0</span><span class="p">)</span> <span class="p">(</span><span class="nv">point-max</span><span class="p">)</span> <span class="p">(</span><span class="nv">point-min</span><span class="p">)))))))</span>

<span class="p">(</span><span class="nb">defun</span> <span class="nv">endless/backward-paragraph</span> <span class="p">(</span><span class="k">&amp;optional</span> <span class="nv">n</span><span class="p">)</span>
  <span class="s">&quot;Go back up to previous blank line.&quot;</span>
  <span class="p">(</span><span class="nv">interactive</span> <span class="s">&quot;p&quot;</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">endless/forward-paragraph</span> <span class="p">(</span><span class="nb">-</span> <span class="nv">n</span><span class="p">)))</span></code></pre></div>
<p>
By no means am I the first to be bothered by this. Both <a href="http://ergoemacs.org/emacs/emacs_move_by_paragraph.html">Xah Lee</a> and
<a href="http://whattheemacsd.com/setup-html-mode.el-01.html">Magnar Sveen</a>, for instance, also complain about this in <a href="http://doc.endlessparentheses.com/Fun/html-mode"><code>html-mode</code></a>
(I'm more bothered by <a href="http://bruce-connor.github.io/emacs-online-documentation/Fun/LaTeX-mode"><code>LaTeX-mode</code></a>). Had I the bravery to delve into the mailing lists, I'd no doubt
find posts on this that are older than me.
</p>

<p>
Does paragraph navigation ever get on <i>your</i> nerves?</p>

   <p><a href="http://endlessparentheses.com/meta-binds-part-2-a-peeve-with-paragraphs.html?source=rss#disqus_thread">Comment on this.</a></p>