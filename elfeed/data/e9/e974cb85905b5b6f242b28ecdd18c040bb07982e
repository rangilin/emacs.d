<p>We&#39;re Ruby developers. Our beloved language uses a ton of RAM. We love to complain about it and PaaS founders are sleeping on beds made out of cash because of it.</p>

<p>We don&#39;t really make it any easier on ourselves either. We love process forking, hate threads and love including huge chunks of other people&#39;s code into our projects. Processes and threads are for writing about another day, but the last one I&#39;m going to address now.</p>

<p>I&#39;ve had the opportunity to work on quite a few Rails projects. Just about all of them have north of fifty gems and some of them close to one hundred gems. Gems are more than just a cute name for &quot;library&quot;: <strong>they are a dependency</strong>. As with any other type of dependency, we should be limiting them.</p>

<h3>How I Start A New Rails App</h3>
<div class="highlight"><pre><code class="bash language-bash" data-lang="bash"><span class="nv">$ </span>rails new my_cool_app -d postgresql
</code></pre></div>
<p>That&#39;s it. After that I plop open the <code>test</code> directory (because despite what you&#39;ve heard, TDD is alive and well) and get to work. I wait for something to cause me pain before I go out looking for an off-the-shelf solution. You&#39;ll be amazed at all the things you don&#39;t really need, but thought you couldn&#39;t live without. I don&#39;t even use Haml, RSpec or FactoryGirl anymore!</p>

<p>Contrast this with how you start a new Rails application:</p>
<div class="highlight"><pre><code class="bash language-bash" data-lang="bash"><span class="nv">$ </span>rails new my_cool_app -d postgresql <span class="o">&amp;&amp;</span> <span class="nb">cd </span>my_cool_app
<span class="nv">$ </span>vim Gemfile <span class="c"># It&#39;s time to go shopping!</span>
<span class="nv">$ </span>bundle install <span class="c"># It&#39;s time for a coffee break while all those gems download</span>
</code></pre></div>
<h3>Object-orientation Is Your Gem</h3>

<p>Ruby, by extension of object-orientation, comes with so many great tools for solving common problems. Need decorators? You don&#39;t need Draper. I guarantee you at least one of <a href="http://www.ruby-doc.org/stdlib-2.1.0/libdoc/delegate/rdoc/SimpleDelegator.html">SimpleDelegator</a>, <a href="http://www.ruby-doc.org/stdlib-2.1.0/libdoc/delegate/rdoc/Delegator.html">Delegator</a> or <a href="http://www.ruby-doc.org/stdlib-2.1.0/libdoc/forwardable/rdoc/Forwardable.html">Forwardable</a> has you covered.</p>

<p>Is authorization giving you the blues? You don&#39;t need CanCan(Can) or one of the other several authorization gems out there. Just compose your <code>User</code> objects with other models, define simple predicate methods and use duck typing to get the job done. Voila. If that&#39;s too much to ask, you can check out the wonderful <a href="https://github.com/elabs/pundit">Pundit</a> library. It weighs in at a whopping 150 lines of code.</p>

<h3>Exemptions</h3>

<p>Look, now I&#39;m not saying go out and reinvent the wheel all over the place. Using existing gems makes perfect sense in some cases. Good reasons for using a gem would be database drivers, file parsers and API wrappers for popular services.</p>

<p>There&#39;s also a fine line between not pulling in unnecessary dependencies and suffering from <a href="https://github.com/visionmedia/mocha">Not</a> <a href="https://github.com/visionmedia/jade">Invented</a> <a href="https://github.com/visionmedia/axon">Here</a> <a href="https://github.com/visionmedia/styl">Syndrome</a>. If you catch yourself writing another Twitter API wrapper, you&#39;re missing the message here.</p>

<h3>A Test</h3>

<p>Next time you&#39;re going to add a gem to your project, ask yourself these three questions below. If you can say &quot;no&quot; to all three questions, feel free to add the gem to your Gemfile:</p>

<ul>
<li>Does the gem name end in <code>-rails</code>? If it does, it&#39;s very likely just some JavaScript or CSS that you should be versioning yourself, or using <a href="http://bower.io/">Bower</a> for.</li>
<li>Does the gem involve iterating through an array or hash? C&#39;mon, you&#39;re better than that!</li>
<li>Is the gem for sending HTTP requests or parsing JSON? I guarantee you have about five libaries that do either of these already.</li>
</ul>
