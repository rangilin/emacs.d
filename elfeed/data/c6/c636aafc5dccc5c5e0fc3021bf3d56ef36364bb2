<p>The bottom line:</p>

<blockquote>
  <p>Modularity. Details. Pick <strong>one</strong>.</p>
</blockquote>

<p>I routinely work with programmers who feel uncomfortable with tiny methods and tiny classes, in spite of all the benefits of tiny methods and tiny classes:</p>

<ul>
  <li>easier to test</li>
  <li>easier to read</li>
  <li>easier to understand</li>
  <li>easier to build correctly</li>
  <li>easier to compose into working systems</li>
</ul>

<p>The programmers who don’t like them cite these problems most often:</p>

<ul>
  <li>“I can’t find stuff!”</li>
  <li>“I have to click too much to see what’s happening!” </li>
</ul>

<p><a href="http://link.jbrains.ca/WCa40C">This article by Kevin Rutherford</a> reminded me of this issue. While Kevin extols the virtues of tiny methods, he doesn’t address this phenomenon, although he admits to running into it himself. I wanted to share what I do with him, but it doesn’t fit well into a comment. When I hear programmers complain about these things, I offer the following two responses to them.</p>

<!-- more -->

<h2 id="you-appear-to-be-navigating-would-you-like-help-with-that">You appear to be navigating. Would you like help with that?</h2>

<p>I have paired, albeit mostly briefly, with hundreds of programmers by now. Most of them, to my surprise, <em>navigate</em> their code bases to find things. By this, I mean that they open up folders in a navigator view in their IDE, or navigate the file system, in order to locate a file containing the code that they want to read or change. <a href="http://link.jbrains.ca/WDuMdZ">Not wanting to make pair programming suck</a>, I hold my tongue until I’ve built up more trust with the person. If I think they trust me, then I stop them and suggest:</p>

<blockquote>
  <p>Don’t navigate when you can search.</p>
</blockquote>

<p>I just don’t care <em>where</em> to find things any more. Just knowing that “they’re somewhere in this room”<sup id="fnref:summer-school"><a href="#fn:summer-school" rel="footnote">1</a></sup> suffices. Only when searching fails do I resort to navigating.</p>

<p>The classic book <a href="http://link.jbrains.ca/WNg8Se">The Pragmatic Programmer</a> teaches us to learn one editor well, which I try to do. As part of classroom training and mentoring hundreds of programmers, I find myself working in unfamiliar environments quite often. When I work in a new one, I spend some time learning how to search for things. In Eclipse, I use “Open Type” and “Open Resource” extensively. Before I knew anything useful about <code>vim</code>, I knew to press <code>/</code> to find text in a file. Before I knew anything useful about Unix, I could clumsily use <code>grep</code>, and more recently I’ve learned about <code>ack</code> and even <code>ag</code>. I don’t use Emacs any more, but I love its incremental search feature. I see this as an extension of the maxim that humans ought to delegate mechanical tasks to the computer, such as searching text for a pattern.</p>

<p>I <em>still</em> see programmers <em>scan web pages with their eyes to find text</em>, rather than use the “search” feature of their browser. I just don’t understand why they do this. I prefer to work in environments <em>where I don’t even know that it stores my code in <strong>files</strong></em>!<sup id="fnref:vajava"><a href="#fn:vajava" rel="footnote">2</a></sup> </p>

<p>This brings me to my other response.</p>

<h2 id="modularity-details-pick-one">Modularity. Details. Pick One.</h2>

<p>If you ask programmers whether they want modularity, they usually claim that they do. It sounds like something they ought to want, books on design tell them to want it, and so I imagine that some programmers claim to want it in order to look good among their peers. Unfortunately, many such programmers don’t appear to understand that modularity comes from abstraction, and that abstraction literally means hiding details, and that doesn’t mesh with their clinging to details. To them, I suggest repeating a little mantra all day today:</p>

<blockquote>
  <p>I don’t care. I don’t need to know. <strong>I don’t want to know.</strong></p>
</blockquote>

<p>Giving up details won’t lead you directly to writing modular code, but clinging to details will keep you from it. The more your code knows about its neighbors, the less you can change or replace those neighbors. Changes ripple out to the rest of the system. When you do this, you’re writing more legacy code.</p>

<blockquote>
  <p>Modularity needs abstraction. Abstraction means hiding details. If you cling to details, then you won’t create abstractions, and you won’t achieve modularity. <strong>Modularity begins with your refusal to let others burden you with unnecessary detail.</strong></p>
</blockquote>

<p>I noticed that my designs improved once I began stubbornly refusing to know any more than I needed to achieve my current goal. Try starting there. “I don’t care. I don’t need to know. <strong>I don’t want to know</strong>.”</p>

<p>Look at the SOLID principles and how they relate to not wanting to know details.</p>

<ul>
  <li>Single Responsibility: I don’t want to know about any other behavior in this system right now.</li>
  <li>Open/Closed: I don’t want to know how things work in order to extend them.</li>
  <li>Liskov Substitution: I don’t want to know which implementation of each interface this code uses.</li>
  <li>Interface Segregation: I don’t want to know anything more than the minimum I need to do my job.</li>
  <li>Dependency Inversion: I don’t want to know how the rest of the system uses me.</li>
</ul>

<p>I don’t think I can make it any plainer than that.</p>

<p>Of course, I’ve assumed in this article that we <em>want</em> modular systems. You might not. I don’t want to argue the merits of modularity here. Instead, I want to make one thing clear:</p>

<blockquote>
  <p><strong>Modularity and obsession with details exclude one another. If you want one, then you can’t have the other, so pick one.</strong></p>
</blockquote>

<div class="footnotes">
  <ol>
    <li id="fn:summer-school">
      <p>Find and watch <a href="http://www.imdb.com/title/tt0094072">this film</a>. Don’t be put off by the inclusion of Kirstie Alley.<a href="#fnref:summer-school" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:vajava">
      <p>I would really have loved Visual Age for Java if it didn’t corrupt the workspace so frequently.<a href="#fnref:vajava" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
