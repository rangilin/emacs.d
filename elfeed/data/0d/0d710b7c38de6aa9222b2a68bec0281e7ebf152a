<div class="alert alert-warning">
<p><strong>Update!</strong> <small>Mar 28, 2014</small></p>
<p>Carton was renamed to Cask some time ago. All links in this article were updated accordingly</p>
<p>While a lot of the information in this article is still correct, you need to read it with care.</p>
</div>
<p><a href="https://github.com/cask/cask">Carton</a> is a little utility to manage Emacs packages. Simply speaking, it is to <code>package.el</code>, what Bundler is to Rubygems.</p>
<p>You can use it to manage the packages in your Emacs configuration, or the development dependencies of packages that you are developing.</p>
<p>Carton works around a <code>Carton</code> file, in which package repositories and packages are specified. The command <code>carton</code> works on this file, and provides commands to install and update the packages in a <code>Carton</code> file.</p>
<h1 id="getting-started">Getting started</h1>
<p>Just install Carton following the <a href="http://cask.github.io/installation.html">instructions on the project page</a>.</p>
<h1 id="carton-in-.emacs.d">Carton in <code>~/.emacs.d</code></h1>
<p>In your personal Emacs configuration Carton basically provides a central place to specify the packages you want to use in your configuration. With Carton, you do not longer need to add your packages directory to Git or clutter your configuration files with <code>(package-install)</code> calls.</p>
<p>To use Carton in your personal Emacs configuration, create a file <code>~/.emacs.d/Carton</code>. A simple <code>Carton</code> file looks like this:</p>
<div class="highlight"><pre><span class="p">(</span><span class="nv">source</span> <span class="s">&quot;melpa&quot;</span> <span class="s">&quot;http://melpa.milkbox.net/packages/&quot;</span><span class="p">)</span>

<span class="p">(</span><span class="nv">depends-on</span> <span class="s">&quot;solarized-theme&quot;</span><span class="p">)</span>
<span class="p">(</span><span class="nv">depends-on</span> <span class="s">&quot;magit&quot;</span><span class="p">)</span>
<span class="p">(</span><span class="nv">depends-on</span> <span class="s">&quot;flycheck&quot;</span><span class="p">)</span>
</pre></div>

<p>The syntax is rather simple:</p>
<ul>
<li>A <code>source</code> line adds a 3rd party package repository, in this example the compulsory <a href="http://melpa.milkbox.net">MELPA</a> repository.</li>
<li>A <code>depends-on</code> line specifies a package to install, in this case, in this case the fancy <a href="https://github.com/bbatsov/solarized-emacs">Solarized</a> theme, the awesome Git frontend <a href="https://github.com/magit/magit">Magit</a> and my syntax checking library <a href="https://github.com/flycheck/flycheck">Flycheck</a>.</li>
</ul>
<p>Read the Carton documentation for more details on the syntax.</p>
<p>A real-world <code>Carton</code> file is just as simple as this example, as you can see in the <code>Carton</code> file from <a href="https://github.com/lunaryorn/stante-pede/blob/b6b5c0c248cd384ac752230ee832f6425e0931a7/Cask">my Emacs configuration</a>.</p>
<p>Instead of <kbd>M-x package-install</kbd> and <kbd>M-x list-packages</kbd> to install and update packages, you now use the <code>carton</code> command:</p>
<div class="highlight"><pre><span class="gp">$</span> <span class="nb">cd</span> ~/.emacs.d/
<span class="gp">#</span> Installing all packages from Carton
<span class="gp">$</span> carton install
<span class="gp">#</span> Updating all packages from Carton
<span class="gp">$</span> carton update
</pre></div>

<div class="alert alert-warning">
<p><strong>Warning!</strong> You need to re-start Emacs after each of these commands.</p>
</div>
<p>To install a new package, simply add it to the <code>Carton</code> file:</p>
<div class="highlight"><pre><span class="gp">$</span> <span class="nb">cd</span> ~/.emacs.d/
<span class="gp">$</span> <span class="nb">echo</span> <span class="s1">&#39;(depends-on &quot;company&quot;)&#39;</span> &gt;&gt; Carton
<span class="gp">$</span> carton install
</pre></div>

<p>After restarting Emacs, the <a href="http://company-mode.github.io/">Company</a> package will now be available in Emacs.</p>
<h1 id="carton-for-package-development">Carton for package development</h1>
<p>Carton can also manage the runtime <em>and development</em> dependencies of the Emacs packages that you develop. As in your configuration it provides a central place to specify dependencies, and also install them <em>locally</em> in the source directory. It keeps your Emacs configuration clean of packages for development, and your source directory clean of submodules.</p>
<p>Carton also handles the <code>load-path</code> for you, and allows you to execut e commands with a <code>load-path</code> that includes all locally installed packages.</p>
<p>Again you start with a <code>Carton</code> file, like the one of <a href="https://github.com/flycheck/flycheck">Flycheck</a> itself:</p>
<div class="highlight"><pre><span class="p">(</span><span class="nv">source</span> <span class="s">&quot;melpa&quot;</span> <span class="s">&quot;http://melpa.milkbox.net/packages/&quot;</span><span class="p">)</span>

<span class="p">(</span><span class="nv">package-file</span> <span class="s">&quot;flycheck.el&quot;</span><span class="p">)</span>

<span class="c1">;; Various modes for use in the unit tests</span>
<span class="p">(</span><span class="nv">development</span>
 <span class="p">(</span><span class="nv">depends-on</span> <span class="s">&quot;coffee-mode&quot;</span><span class="p">)</span>
 <span class="p">(</span><span class="nv">depends-on</span> <span class="s">&quot;haml-mode&quot;</span><span class="p">)</span>
 <span class="p">(</span><span class="nv">depends-on</span> <span class="s">&quot;js2-mode&quot;</span><span class="p">)</span>
 <span class="p">(</span><span class="nv">depends-on</span> <span class="s">&quot;js3-mode&quot;</span><span class="p">)</span>
 <span class="p">(</span><span class="nv">depends-on</span> <span class="s">&quot;lua-mode&quot;</span><span class="p">)</span>
 <span class="p">(</span><span class="nv">depends-on</span> <span class="s">&quot;cperl-mode&quot;</span><span class="p">)</span>
 <span class="p">(</span><span class="nv">depends-on</span> <span class="s">&quot;php-mode&quot;</span><span class="p">)</span>
 <span class="p">(</span><span class="nv">depends-on</span> <span class="s">&quot;php+-mode&quot;</span><span class="p">)</span>
 <span class="p">(</span><span class="nv">depends-on</span> <span class="s">&quot;sass-mode&quot;</span><span class="p">)</span>
 <span class="p">(</span><span class="nv">depends-on</span> <span class="s">&quot;scss-mode&quot;</span><span class="p">)</span>
 <span class="p">(</span><span class="nv">depends-on</span> <span class="s">&quot;go-mode&quot;</span><span class="p">)</span>
 <span class="p">(</span><span class="nv">depends-on</span> <span class="s">&quot;rust-mode&quot;</span><span class="p">))</span>
</pre></div>

<p>This file uses two other directives of Carton, specifically targeted at package development:</p>
<ul>
<li><code>package-file</code> declares the “main” file of your package. Carton extracts the package meta data (name, version and description) and the runtime dependencies from the <a href="http://www.gnu.org/software/emacs/manual/html_node/elisp/Library-Headers.html#Library-Headers">standard package headers</a> of this file. Alternatively you can use <code>package</code> and <code>depends-on</code> to declare the meta data and the runtime dependencies directly .</li>
<li><code>development</code> scopes contained dependencies to development only.</li>
</ul>
<p>Now you can install all these dependencies <em>locally</em> into your source directory, and run arbitrary shell commands with a <code>load-path</code> that includes these packages:</p>
<div class="highlight"><pre><span class="gp">$</span> carton install
<span class="gp">$</span> carton <span class="nb">exec </span>make <span class="nb">test</span>
</pre></div>

<p>The first command installs all packages from the <code>Carton</code> file into an <code>elpa</code> directory alongside the <code>Carton</code> file. <code>carton exec</code> then runs the given command (<code>make test</code> in this case) with a <code>load-path</code> that includes all of these packages.</p>
<p>You can also embed Carton directly into your test runner script, e.g. as <code>tests/run.sh</code>:</p>
<div class="highlight"><pre><span class="c">#!/bin/sh</span>

<span class="k">if</span> <span class="o">[</span> -z <span class="s2">&quot;$EMACS&quot;</span> <span class="o">]</span>; <span class="k">then</span>
<span class="k">  </span><span class="nb">export </span><span class="nv">EMACS</span><span class="o">=</span>emacs
<span class="k">fi</span>

carton <span class="nb">exec</span> <span class="s2">&quot;${EMACS}&quot;</span> -Q --no-site-lisp --script <span class="se">\</span>
  <span class="s2">&quot;$(dirname $0)/flycheck-testrunner.el&quot;</span> <span class="s2">&quot;$@&quot;</span>
</pre></div>

<p>Now <code>tests/run.sh</code> executes all Flycheck tests with correct dependencies.</p>
<h1 id="conclusion">Conclusion</h1>
<p>Carton provides an easy and convenient way to manage all of your Emacs packages, keeping your Emacs configuration and your packages clean of all the package management hassle.</p>
<p>The utility is actively maintained and covered by a comprehensive test suite, and it’s maintainer responds very fast to issues and pull requests.</p>
<p>In short, the sooner Carton becomes part of your tool chain, the better!</p>