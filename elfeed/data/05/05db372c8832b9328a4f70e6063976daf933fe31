<div><p>One of the surprising responses to the #isTDDDead series of hangouts is how many people think we should be doing something else. Before Wednesday&#039;s double episode finale I wanted to set down my purposes, as much as I understand of them, and respond to those whose needs aren&#039;t being met.</p><p><br /></p><p>The sequence, as I remember it, was that David presented his &quot;TDD Is Dead&quot; keynote, David talked privately to Martin, David talked privately to me for an hour, at the end of the hour he suggested the three of us talk, and I proposed that we make our conversations public. I didn&#039;t have a clear purpose in mind at the time, it was just the sort of impulse that I have learned to honor.</p><p><br /></p><p>Rationalizing after the fact, I think what I recognized about the situation was that here were three people who all cared about the same topic, all had experience, and were all eager to learn. I figured I would learn something from the conversation, so it made sense to do it. Making the conversations public was a bit odd. I&#039;m not sure what my purpose was in suggesting that beyond drawing attention to myself, an addiction I am trying to overcome, but it seems to have worked out for most people.</p><p><br /></p><p>These kinds of conversations are common. Several times a year some interesting technical or social point comes up and an ad hoc group forms temporarily to discuss it. These conversations are just never made public.</p><p><br /></p><p><b>So, to my purposes for #isTDDDead:</b></p><p><br /></p><p>I&#039;m puzzled by the limits of TDD--it works so well for algorithm-y, data-structure-y code. I love the feeling of confidence I get when I use TDD. I love the sense that I have a series of achievable steps in front of me--can&#039;t imagine the implementation? no problem, you can always write a test. I recognize that TDD loses value as tests take longer to run, as the number of possible faults per test failure increases, as tests become coupled to the implementation, and as tests lose fidelity with the production environment. How far out can TDD be pushed? Are there special cases where TDD works surprisingly well? Poorly? At what point is the cure worse than the disease? How can answers to any and all of these questions be communicated effectively?Â </p><p><br /></p><p>Those are the questions I&#039;m trying to explore with #isTDDDead and it&#039;s been effective in helping me learn.</p><p><br /></p><p>So, if you want to:</p><ul><li>Improve the position of under-represented groups in programming, that seems to me a noble goal. I contribute to it as well, just not in public.</li><li>Hear a balanced debate about mocks, that seems like an interesting topic, but this is not the place.</li><li>Watch well-known programmers tear each other down in public, you need to get a life. There are programs that need writing.</li></ul></div>