
<p class = 'original'><a href = 'http://martinfowler.com/bliki/Retread.html'>Retread</a> of post orginally made on 07 Dec 2005</p>

<p>In my writing endeavors, I've long intended to write a chunk of
	material on validation. It's an area that leads to a lot of
	confusion and it would be good to get some solid description of some
	of the techniques that work well. However life is full of things to
	write about, rather more than time allows.</p>

<p>Some recent readings made me think about saying a few
	preliminary things on the topic. One common thing I see people do
	is to develop validation routines for objects. These routines come
	in various ways, they may be in the object or external, they may
	return a boolean or throw an exception to indicate failure. But one
	thing that I think constantly trips people up is when they think
	object validity on a context independent way such as an <code>isValid</code>
	method implies.</p>

<p>I think it's much more useful to think of validation as something
that's bound to a context - typically an action that you want to do.
Is this order valid to be filled, is this customer valid to check in
to the hotel. So rather than have methods like <code>isValid</code>
have methods like <code>isValidForCheckIn</code>. </p>

<p>One of the consequences of this is that saving an object to a
	database is itself an action. Thinking about it that way raises some
	important questions. Often when people talk about a context-free
	validity, they mean it in terms of saving to a database. But the
	various validity checks that make this up should be interrogated
	with the question "should failing this test prevent saving?"</p>

<p>In <a href="http://www.amazon.com/gp/product/1568843224?ie=UTF8&amp;tag=martinfowlerc-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1568843224">About Face</a><img src="http://www.assoc-amazon.com/e/ir?t=martinfowlerc-20&amp;l=as2&amp;o=1&amp;a=0321601912" width="1" height="1" border="0" alt="" style="width: 1px !important; height: 1px !important; border:none !important; margin:0px !important;"/> Alan Cooper advocated that we shouldn't let
our ideas of valid states prevent a user from entering (and saving)
incomplete information. I was reminded by this a few days ago when
reading a draft of a book that <a href="http://www.jnsk.se/weblog/rss.xml">Jimmy Nilsson</a> is working
on. He stated a principle that you should always be able to save an
object, even if it has errors in it. While I'm not convinced that this
should be an absolute rule, I do think people tend to prevent saving
more than they ought. Thinking about the context for validation may
help prevent that.</p>

<p class="repost">reposted on 03 Nov 2011</p>

<p class="shares"><span class="label">Share: </span><a href="https://twitter.com/intent/tweet?url=http://martinfowler.com/bliki/ContextualValidation.html&amp;text=Bliki: ContextualValidation" title="Share on Twitter"><img src="/t_mini-a.png"/></a><a href="https://facebook.com/sharer.php?u=http://martinfowler.com/bliki/ContextualValidation.html" title="Share on Facebook"><img src="/fb-icon-20.png"/></a><a href="https://plus.google.com/share?url=http://martinfowler.com/bliki/ContextualValidation.html" title="Share on Google Plus"><img src="/gplus-16.png"/></a></p>
