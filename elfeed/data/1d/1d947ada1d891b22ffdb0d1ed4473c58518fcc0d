<p>In the current release of Flycheck, the executable used by a syntax checker is hard-coded. The <code>python-pylint</code> syntax checker will always use the first <code>pylint</code> executable in <code>exec-path</code>.</p>
<p>The only way to effectively change the executable was to create symbolic links in a directory in front of <code>exec-path</code>, which is somewhat inconvenient, if you wanted to change the executable frequently, or use a different executable in different buffer.</p>
<p>Since <a href="https://github.com/flycheck/flycheck/commit/cb5de77314a3cbee938a23a83b4c8a4516384388">cb5de77</a> (<a href="https://github.com/flycheck/flycheck/pull/272">#272</a>) Flycheck now provides means to change the executable used by a syntax checker.</p>
<h1 id="changing-executables-interactively">Changing executables interactively</h1>
<p>To use a different executable in the current buffer, press <kbd>C-c ! e</kbd> (<code>flycheck-set-checker-executable</code>). The command prompts for a syntax checker and an executable file, and uses the selected executable for the selected syntax checker in the current buffer.</p>
<p>For instance, to use <code>pylint3</code> as executable for <code>python-pylint</code>, type <kbd>C-c ! e python-pylint RET pylint3</kbd>. To reset the executable to the default, type <kbd>C-u C-c ! e</kbd>, that is <code>flycheck-set-checker-executable</code> with prefix argument.</p>
<p>The command then prompts for a syntax checker only, and resets the executable of the selected syntax checker to the default value given in the syntax checker definition.</p>
<h1 id="executable-variables">Executable variables</h1>
<p>The workhorse behind this command are “executable variables”: Each syntax checker now has a associated variable called <code>flycheck-CHECKER-exectuable</code>, where <code>CHECKER</code> is the name of the syntax checker. For instance, the associated variable of the <code>python-pylint</code> syntax checker is <code>flycheck-python-pylint-executable</code>. These variables are buffer-local and customizable with <code>M-x customize-group RET flycheck-executables</code>.</p>
<p>The value of such a variable is either <code>nil</code>, to use the default executable from the definition of the syntax checker, or a string with the name or the path to an executable. For instance, the following code is equivalent to the interactive command from the last section:</p>
<div class="highlight"><pre><span class="p">(</span><span class="k">setq</span> <span class="nv">flycheck-python-pylint-executable</span> <span class="s">&quot;pylint3&quot;</span><span class="p">)</span>
</pre></div>

<p>If the variable is not <code>nil</code>, its value is used as executable when running the syntax checker. If the value is not an absolute path to an executable, it is search in <code>exec-path</code> using <code>executable-find</code>.</p>
<h1 id="applications">Applications</h1>
<ul>
<li>As a Ruby developer, you can now use different Ruby versions to test buffers. For instance, you can use Ruby 2 to check buffers from your Rails project, but Ruby 1.8 for your new Homebrew Formula.</li>
<li><p>As a Python developer, you can now use Pylint from your virtualenv. If you use the built-in Python mode, you probably already set <code>python-shell-virtualenv-path</code> via directory local variables. In this case, you can easily automate this with the following Emacs Lisp code:</p>
<div class="highlight"><pre><span class="p">(</span><span class="nb">defun</span> <span class="nv">flycheck-python-set-executables</span> <span class="p">()</span>
  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">exec-path</span> <span class="p">(</span><span class="nv">python-shell-calculate-exec-path</span><span class="p">)))</span>
    <span class="p">(</span><span class="k">setq</span> <span class="nv">flycheck-python-pylint-executable</span> <span class="p">(</span><span class="nv">executable-find</span> <span class="s">&quot;pylint&quot;</span><span class="p">)</span>
          <span class="nv">flycheck-python-flake8-executable</span> <span class="p">(</span><span class="nv">executable-find</span> <span class="s">&quot;flake8&quot;</span><span class="p">)))</span>
  <span class="c1">;; Force Flycheck mode on</span>
  <span class="p">(</span><span class="nv">flycheck-mode</span><span class="p">))</span>

<span class="p">(</span><span class="nb">defun</span> <span class="nv">flycheck-python-setup</span> <span class="p">()</span>
  <span class="p">(</span><span class="nv">add-hook</span> <span class="ss">&#39;hack-local-variables-hook</span> <span class="nf">#&#39;</span><span class="nv">flyspell-python-set-executables</span>
            <span class="no">nil</span> <span class="ss">&#39;local</span><span class="p">))</span>

<span class="p">(</span><span class="nv">add-hook</span> <span class="ss">&#39;python-mode-hook</span> <span class="nf">#&#39;</span><span class="nv">flycheck-python-setup</span><span class="p">)</span>
</pre></div>
</li>
</ul>
<p>There are probably countless other applications for this new feature I have not though of. If you have done something cool with it, please let me know.</p>
<p>Have fun with Flycheck!</p>