<p>At June, 13th Emacs trunk introduced a new macro with-eval-after-load in <a href="http://git.savannah.gnu.org/cgit/emacs.git/commit/?h=trunk&amp;id=fde7048a0bf523e22dd6d80f170c8dd380c1807e">r112976</a> (Git mirror). It behaves like <code>eval-after-load</code>, except that it takes multiple unquoted forms and wraps them into a <code>lambda</code> to enable byte compilation:</p>
<div class="highlight"><pre><span class="p">(</span><span class="nv">with-eval-after-load</span> <span class="ss">&#39;python</span>
  <span class="p">(</span><span class="nv">add-hook</span> <span class="ss">&#39;python-mode-hook</span> <span class="nf">#&#39;</span><span class="nv">subword-mode</span><span class="p">)</span>
  <span class="p">(</span><span class="k">setq</span> <span class="nv">python-check-command</span> <span class="s">&quot;flake8&quot;</span><span class="p">))</span>
</pre></div>

<p>This supersedes much of my <a href="/2013/05/01/byte-compiling-eval-after-load.html">last post</a> about byte compilation in <code>eval-after-load</code>. However, the new macro does not load the corresponding features during byte compilation, so Iâ€™ll wrap my old <code>stante-after</code> macro around it to avoid bogus warnings, just like in the last post:</p>
<div class="highlight"><pre><span class="p">(</span><span class="nb">defmacro</span> <span class="nv">stante-after</span> <span class="p">(</span><span class="nv">feature</span> <span class="k">&amp;rest</span> <span class="nv">forms</span><span class="p">)</span>
  <span class="p">(</span><span class="k">declare</span> <span class="p">(</span><span class="nv">indent</span> <span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="nv">debug</span> <span class="no">t</span><span class="p">))</span>
  <span class="o">`</span><span class="p">(</span><span class="o">,</span><span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">or</span> <span class="p">(</span><span class="nb">not</span> <span class="nv">byte-compile-current-file</span><span class="p">)</span>
             <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">symbolp</span> <span class="nv">feature</span><span class="p">)</span>
                 <span class="p">(</span><span class="nb">require</span> <span class="nv">feature</span> <span class="no">nil</span> <span class="ss">:no-error</span><span class="p">)</span>
               <span class="p">(</span><span class="nb">load</span> <span class="nv">feature</span> <span class="ss">:no-message</span> <span class="ss">:no-error</span><span class="p">)))</span>
         <span class="ss">&#39;progn</span>
       <span class="p">(</span><span class="nv">message</span> <span class="s">&quot;stante-after: cannot find %s&quot;</span> <span class="nv">feature</span><span class="p">)</span>
       <span class="ss">&#39;with-no-warnings</span><span class="p">)</span>
    <span class="p">(</span><span class="nv">with-eval-after-load</span> <span class="ss">&#39;,feature</span> <span class="o">,@</span><span class="nv">forms</span><span class="p">)))</span>
</pre></div>

<p>To ensure compatibility with releases and older snapshot builds, I define <code>with-eval-after-load</code> if it is absent:</p>
<div class="highlight"><pre><span class="p">(</span><span class="nb">unless</span> <span class="p">(</span><span class="nb">fboundp</span> <span class="ss">&#39;with-eval-after-load</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">defmacro</span> <span class="nv">with-eval-after-load</span> <span class="p">(</span><span class="nv">file</span> <span class="k">&amp;rest</span> <span class="nv">body</span><span class="p">)</span>
    <span class="o">`</span><span class="p">(</span><span class="nv">eval-after-load</span> <span class="o">,</span><span class="nv">file</span>
       <span class="o">`</span><span class="p">(</span><span class="nb">funcall</span> <span class="p">(</span><span class="k">function</span> <span class="o">,</span><span class="p">(</span><span class="k">lambda</span> <span class="p">()</span> <span class="o">,@</span><span class="nv">body</span><span class="p">))))))</span>
</pre></div>

<p>This compatibility definition of <code>with-eval-after-load</code> uses the same idea as the old definition of the <code>stante-after</code> macro and simply wraps the body in a <code>lambda</code> form.</p>