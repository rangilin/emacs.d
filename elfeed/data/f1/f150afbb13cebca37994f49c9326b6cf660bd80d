<p>
I used to love solving logic puzzles as a kid. Bought books of
'em. Great fun. They're a puzzle with this sort of shape:
</p>

<ol class="org-ol">
<li>There are four sets of five things. For example, 5 people, 5
magazines, 5 reservation times and 5 cheeses.
</li>
<li>There are rules that connect them together, like, "Jason likes mozzarella."
</li>
<li>The rules are exclusive. If we're told Jason likes mozzarella, then
Jason likes no other cheese, and nobody else likes mozzarella.
</li>
<li>You are given enough clues about the relationships between these
things that only one possible configuration can exist.  Find it.
</li>
</ol>

<p>
It cries out, "Logic Programming", doesn't it? Well, recently the
London Cloure group took a crack at it. We got pretty far, but didn't
complete it before the night was over. I thought I'd finish it off and
write it up, for your pleasure. Here goes&#x2026;
</p>

<p>
I've taken a puzzle from <a href="http://www.logic-puzzles.org/init.php">Logic Puzzles.org</a>, who seem to have a army of
them. Here are the sets of things we're dealing with:
</p>

<ul class="org-ul">
<li><b>People</b>: Amaya, Bailey, Jamari, Jason &amp; Landon.
</li>
<li><b>Cheeses</b>: Asiago, Blue Cheese, Mascarpone, Mozzarella &amp; Muenster
</li>
<li><b>Magazines</b>: Fortune, Time, Cosmopolitan, US Weekly &amp; Vogue
</li>
<li><b>Reservation times</b>: 5pm, 6pm, 7pm, 7:30pm, 8:30pm.
</li>
</ul>

<p>
And here are the rules. You can skim over them. We'll go through them
in detail in <a href="/2013/02/solving-logic-puzzles-with-clojures-core-logic-part-two.html">part two</a>.
</p>

<blockquote>
<ol class="org-ol">
<li>Of Landon and Jason, one has the 7:30pm reservation and the other loves mozzarella.
</li>
<li>The blue cheese enthusiast subscribed to Fortune.
</li>
<li>The muenster enthusiast didn't subscribe to Vogue.
</li>
<li>The 5 people were the Fortune subscriber, Landon, the person with a
reservation at 5:00pm, the mascarpone enthusiast, and the Vogue
subscriber.
</li>
<li>The person with a reservation at 5:00pm didn't subscribe to Time.
</li>
<li>The Cosmopolitan subscriber has an earlier reservation than the mascarpone enthusiast.
</li>
<li>Bailey has a later reservation than the blue cheese enthusiast.
</li>
<li>Either the person with a reservation at 7:00pm or the person with a
reservation at 7:30pm subscribed to Fortune.
</li>
<li>Landon has a later reservation than the Time subscriber.
</li>
<li>The Fortune subscriber is not Jamari.
</li>
<li>The person with a reservation at 5:00pm loves mozzarella.
</li>
</ol>
</blockquote>

<p>
There's only one possible solution, and <code>core.logic</code> is going to find it for us.
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Before We Start, What's An <code>lvar</code>?</h2>
<div class="outline-text-2" id="text-1">
<p>
Imagine a closed box. I'll tell you that inside the box is
something that is grey, weighs one tonne, and has a horn on its
nose. When we open the box, you won't be surprised to see it
contains a rhino. That's how I think of a logic variable, or
<code>lvar</code>. It's a box containing something that's unknown right
now. We can state some rules about what must be inside, and when we
come to open the box, the right kind of thing will pop out.
</p>

<p>
So, with that in mind, let's set up our solution.
</p>
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> The Setup</h2>
<div class="outline-text-2" id="text-2">
<p>
We'll start with this code:
</p>

<div class="org-src-container">

<pre class="src src-clojure">(<span style="color: #f92672;">let</span> [people       (<span style="color: #ae81ff;">repeatedly</span> 5 lvar)
      magazines    (<span style="color: #ae81ff;">repeatedly</span> 5 lvar)
      cheeses      (<span style="color: #ae81ff;">repeatedly</span> 5 lvar)
      reservations (<span style="color: #ae81ff;">repeatedly</span> 5 lvar)
      answers (<span style="color: #ae81ff;">map</span> list people magazines cheeses reservations)]
  (run* [q]
       (<span style="color: #ae81ff;">==</span> q answers)))
</pre>
</div>

<p>
Here, we've done four things:
</p>

<ol class="org-ol">
<li>Called the <code>lvar</code> function five times, to create boxes for the five people.
</li>
<li>Repeated that three more times for magazines, cheeses and
reservations.
</li>
<li>Spliced those four lists together, using <code>(map list ...)</code>, to
create a structure that's a list of five <code>[person, magazine, cheese,
   reservation-time]</code> tuples. When we open all those boxes, we'll have
our answer.
</li>
<li><code>run</code> a simple query: "Find all the qs, such that q is a possible answer."

<p>
So far, so good. Now all we need to do is add the right
constraints, and the boxes will magically open to reveal the single
answer to the puzzle.
</p>
</li>
</ol>
</div>
</div>
<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> First Constraints</h2>
<div class="outline-text-2" id="text-3">
<p>
So the first thing we need to constrain is the list of people,
magazines, cheeses and reservations. This would be a start:
</p>

<div class="org-src-container">

<pre class="src src-clojure">(<span style="color: #f92672;">let</span> [people       (<span style="color: #ae81ff;">repeatedly</span> 5 lvar)
      magazines    (<span style="color: #ae81ff;">repeatedly</span> 5 lvar)
      cheeses      (<span style="color: #ae81ff;">repeatedly</span> 5 lvar)
      reservations (<span style="color: #ae81ff;">repeatedly</span> 5 lvar)
      answers (<span style="color: #ae81ff;">map</span> list people magazines cheeses reservations)]
  (run 1 [q]
       (<span style="color: #ae81ff;">==</span> q answers)
       (permuteo people [<span style="color: #fd971f;">:amaya</span> <span style="color: #fd971f;">:bailey</span> <span style="color: #fd971f;">:jamari</span> <span style="color: #fd971f;">:jason</span> <span style="color: #fd971f;">:landon</span>])
       (permuteo magazines [<span style="color: #fd971f;">:fortune</span> <span style="color: #fd971f;">:time</span> <span style="color: #fd971f;">:cosmopolitan</span> <span style="color: #fd971f;">:us-weekly</span> <span style="color: #fd971f;">:vogue</span>])
       (permuteo cheeses [<span style="color: #fd971f;">:asiago</span> <span style="color: #fd971f;">:blue-cheese</span> <span style="color: #fd971f;">:mascarpone</span> <span style="color: #fd971f;">:mozzarella</span> <span style="color: #fd971f;">:muenster</span>])
       (permuteo reservations [5 6 7 7.5 8.5])))
</pre>
</div>

<p>
That says that <code>people</code> matches the list of five names, but not
necessarily in the same order. It's a permutation of the given
list. We repeat that pattern for all four kinds of thing.
</p>

<p>
That's almost right, but there's a problem with ordering. Even once
we've figured out the correct tuples, we're going to get them in
all possible orders, which is 5! or 120 answers, all of which are
equivalent.
</p>

<p>
There are a few ways to handle this. We could to use a Set for the
answers, instead of a list. That would be good in theory, but
<code>core.logic</code> doesn't support sets<sup><a id="fnr.1" name="fnr.1" class="footref" href="#fn.1">1</a></sup>. We could ignore the
problem and just take whichever answer pops out first. Or we could
define a fixed order for any <i>one</i> of the collections, and let the
others fall in line with that.
</p>

<p>
Fixing the order is the approach I like, because then there's only
one possible solution, which makes it easy to check we've got the
rest of the code right later. So let's fix the order of the people:
</p>

<div class="org-src-container">

<pre class="src src-clojure">(<span style="color: #f92672;">let</span> [people       (<span style="color: #ae81ff;">repeatedly</span> 5 lvar)
      magazines    (<span style="color: #ae81ff;">repeatedly</span> 5 lvar)
      cheeses      (<span style="color: #ae81ff;">repeatedly</span> 5 lvar)
      reservations (<span style="color: #ae81ff;">repeatedly</span> 5 lvar)
      answers (<span style="color: #ae81ff;">map</span> list people magazines cheeses reservations)]
  (run 1 [q]
       (<span style="color: #ae81ff;">==</span> q answers)
       (<span style="color: #ae81ff;">==</span> people [<span style="color: #fd971f;">:amaya</span> <span style="color: #fd971f;">:bailey</span> <span style="color: #fd971f;">:jamari</span> <span style="color: #fd971f;">:jason</span> <span style="color: #fd971f;">:landon</span>])
       (permuteo magazines [<span style="color: #fd971f;">:fortune</span> <span style="color: #fd971f;">:time</span> <span style="color: #fd971f;">:cosmopolitan</span> <span style="color: #fd971f;">:us-weekly</span> <span style="color: #fd971f;">:vogue</span>])
       (permuteo cheeses [<span style="color: #fd971f;">:asiago</span> <span style="color: #fd971f;">:blue-cheese</span> <span style="color: #fd971f;">:mascarpone</span> <span style="color: #fd971f;">:mozzarella</span> <span style="color: #fd971f;">:muenster</span>])
       (permuteo reservations [5 6 7 7.5 8.5])))
</pre>
</div>

<p>
And with that, we're ready to start encoding puzzle rules. We'll
pull them out as separate functions, so our final main function
will look like this:
</p>

<div class="org-src-container">

<pre class="src src-clojure">(<span style="color: #f92672;">let</span> [people       (<span style="color: #ae81ff;">repeatedly</span> 5 lvar)
      magazines    (<span style="color: #ae81ff;">repeatedly</span> 5 lvar)
      cheeses      (<span style="color: #ae81ff;">repeatedly</span> 5 lvar)
      reservations (<span style="color: #ae81ff;">repeatedly</span> 5 lvar)
      answers (<span style="color: #ae81ff;">map</span> list people magazines cheeses reservations)]
  (run 1 [q]
       (<span style="color: #ae81ff;">==</span> q answers)
       (<span style="color: #ae81ff;">==</span> people [<span style="color: #fd971f;">:amaya</span> <span style="color: #fd971f;">:bailey</span> <span style="color: #fd971f;">:jamari</span> <span style="color: #fd971f;">:jason</span> <span style="color: #fd971f;">:landon</span>])
       (rule-1 answers)
       (rule-2 answers)
       (rule-3 answers)
       (rule-4 answers)
       (rule-5 answers)
       (rule-6 answers)
       (rule-7 answers)
       (rule-8 answers)
       (rule-9 answers)
       (rule-10 answers)
       (rule-11 answers)
       (permuteo magazines [<span style="color: #fd971f;">:fortune</span> <span style="color: #fd971f;">:time</span> <span style="color: #fd971f;">:cosmopolitan</span> <span style="color: #fd971f;">:us-weekly</span> <span style="color: #fd971f;">:vogue</span>])
       (permuteo cheeses [<span style="color: #fd971f;">:asiago</span> <span style="color: #fd971f;">:blue-cheese</span> <span style="color: #fd971f;">:mascarpone</span> <span style="color: #fd971f;">:mozzarella</span> <span style="color: #fd971f;">:muenster</span>])
       (permuteo reservations [5 6 7 7.5 8.5])))
</pre>
</div>

<p>
We'll look at the individual rules in <a href="/2013/02/solving-logic-puzzles-with-clojures-core-logic-part-two.html">part two&#x2026;</a>
</p>
</div>
</div>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" name="fn.1" class="footnum" href="#fnr.1">1</a></sup> <p class="footpara">
Yet.
</p></div>


</div>
</div><img src="http://feeds.feedburner.com/~r/KrisJenkinsBlog/~4/PmdTVoH1Gcg" height="1" width="1"/>