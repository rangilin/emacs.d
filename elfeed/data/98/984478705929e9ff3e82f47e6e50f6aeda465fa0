<p>A little more than 2 years ago, the
<a href="http://launchpad.net/ceilometer">Ceilometer</a> project was launched inside
the OpenStack ecosystem. Its main objective was to measure OpenStack cloud
platforms in order to provide data and mechanisms for functionalities such
as billing, alarming or capacity planning.</p>
<p>In this article, I would like to relate what I've been doing with other
Ceilometer developers in the last 5 months. I've lowered my involvement in
Ceilometer itself directly to concentrate on solving one of its biggest
issue at the source, and I think it's largely time to take a break and talk
about it.</p>
<h1>Ceilometer early design</h1>
<p>For the last years, Ceilometer didn't change in its core architecture.
Without diving too much in all its parts, one of the early design decision
was to build the metering around a data structure we called <strong>samples</strong>. A
sample is generated each time Ceilometer measures something. It is composed
of a few fields, such as the the resource id that is metered, the user and
project id owning that resources, the meter name, the measured value, a
timestamp and a few free-form metadata. Each time Ceilometer measures
something, one of its components (an agent, a pollster…) constructs and
emits a sample headed for the storage component that we call the
<strong>collector</strong>.</p>
<p>This collector is responsible for storing the samples into a database. The
Ceilometer collector uses a pluggable storage system, meaning that you can
pick any database system you prefer. Our original implementation has been
based on MongoDB from the beginning, but we then added a SQL driver, and
people contributed things such as HBase or DB2 support.</p>
<p>The REST API exposed by Ceilometer allows to execute various reading
requests on this data store. It can returns you the list of resources that
have been measured for a particular project, or compute some statistics on
metrics. Allowing such a large panel of possibilities and having such a
flexible data structure allows to do a lot of different things with
Ceilometer, as you can almost query the data in any mean you want.</p>
<h1>The scalability issue</h1>
<p>We soon started to encounter scalability issues in many of the read requests
made via the REST API. A lot of the requests requires the data storage to do
full scans of all the stored samples. Indeed, the fact that the API allows
you to filter on any fields and also on the free-form metadata (meaning non
indexed key/values tuples) has a terrible cost in terms of performance (as
pointed before, the metadata are attached to each <em>sample</em> generated by
Ceilometer and is stored as is). That basically means that the <em>sample</em> data
structure is stored in most drivers in just one table or collection, in
order to be able to scan them at once, and there's no good "perfect"
sharding solution, making data storage scalability painful.</p>
<p>It turns out that the Ceilometer REST API is unable to handle most of the
requests in a timely manner as most operations are <em>O(n)</em> where <em>n</em> is the
number of samples recorded (see
<a href="http://en.wikipedia.org/wiki/Big_O_notation">big O notation</a> if you're
unfamiliar with it). That number of samples can grow very rapidly in an
environment of thousands of metered nodes and with a data retention of
several weeks. There is a few optimizations to make things smoother in
general cases fortunately, but as soon as you run specific queries, the API
gets barely usable.</p>
<p>During this last year, as the Ceilometer PTL, I discovered these issues
first hand since a lot of people were feeding me back with this kind of
testimony. We engaged several blueprints to improve the situation, but it
was soon clear to me that this was not going to be enough anyway.</p>
<figure class="illustration">
  <img src="http://julien.danjou.info/media/images/blog/2014/unacceptable.jpg" />
</figure>

<h1>Thinking outside the box</h1>
<p>Unfortunately, the PTL job doesn't leave him enough time to work on the
actual code nor to play with anything new. I was coping with most of the
project bureaucracy and I wasn't able to work on any good solution to tackle
the issue at its root. Still, I had a few ideas that I wanted to try and as
soon as I stepped down from the PTL role, I stopped working on Ceilometer
itself to try something new and to think a bit outside the box.</p>
<p>When one takes a look at what have been brought recently in Ceilometer, they
can see the idea that Ceilometer actually needs to handle 2 types of data:
events and metrics.</p>
<p>Events are data generated when something happens: an instance start, a
volume is attached, or an HTTP request is sent to an REST API server. These
are events that Ceilometer needs to collect and store. Most OpenStack
components are able to send such events using the notification system built
into <em><a href="https://wiki.openstack.org/wiki/Oslo/Messaging">oslo.messaging</a></em>.</p>
<p>Metrics is what Ceilometer needs to store but that is not necessarily tied
to an event. Think about an instance CPU usage, a router network bandwidth
usage, the number of images that Glance is storing for you, etc… These are
not events, since nothing is happening. These are facts, states we need to
meter.</p>
<p>Computing statistics for billing or capacity planning requires both of these
data sources, but they should be distinct. Based on that assumption, and the
fact that Ceilometer was getting support for storing events, I started to
focus on getting the metric part right.</p>
<p>I had been a system administrator for a decade before jumping into OpenStack
development, so I know a thing or two on how monitoring is done in this
area, and what kind of technology operators rely on. I also know that
there's still no silver bullet – this made it a good challenge.</p>
<p>The first thing that came to my mind was to use some kind of time-series
database, and export its access via a REST API – as we do in all OpenStack
services. This should cover the metric storage pretty well.</p>
<h1>Cooking Gnocchi</h1>
<figure class="pull-right illustration" style="width: 45%;">
  <img src="http://julien.danjou.info/media/images/blog/2014/gnocchi-logo.jpg" />
  A cloud of gnocchis!
</figure>

<p>At the end of April 2014, this led met to start a new project code-named
Gnocchi. For the record, the name was picked after confusing so many times
the OpenStack Marconi project, reading OpenStack Macaroni instead. At least
one OpenStack project should have a "pasta" name, right?</p>
<p>The point of having a new project and not send patches on Ceilometer, was
that first I had no clue if it was going to make something that would be any
better, and second, being able to iterate more rapidly without being
strongly coupled with the release process.</p>
<p>The first prototype started around the following idea: what you want is to
meter things. That means storing a list of tuples of (timestamp, value) for
it. I've named these things "entities", as no assumption are made on what
they are. An entity can represent the temperature in a room or the CPU usage
of an instance. The service shouldn't care and should be agnostic in this
regard.</p>
<p>One feature that we discussed for several OpenStack summits in the
Ceilometer sessions, was the idea of doing aggregation. Meaning, aggregating
samples over a period of time to only store a smaller amount of them. These
are things that time-series format such as the
<a href="http://oss.oetiker.ch/rrdtool/">RRDtool</a> have been doing for a long time on
the fly, and I decided it was a good trail to follow.</p>
<p>I assumed that this was going to be a requirement when storing metrics into
Gnocchi. The user would need to provide what kind of archiving it would
need: 1 second precision over a day, 1 hour precision over a year, or even
both.</p>
<p>The first driver written to achieve that and store those metrics inside
Gnocchi was based on <a href="http://graphite.wikidot.com/whisper">whisper</a>. Whisper
is the file format used to store metrics for the
<a href="http://graphite.wikidot.com/">Graphite</a> project. For the actual storage,
the driver uses Swift, which has the advantages to be part of OpenStack and
scalable.</p>
<p>Storing metrics for each entities in a different <em>whisper</em> file and putting
them in Swift turned out to have a fantastic algorithm complexity: it was
<em>O(1)</em>. Indeed, the complexity needed to store and retrieve metrics doesn't
depends on the number of metrics you have nor on the number of things you
are metering. Which is already a huge win compared to the current Ceilometer
collector design.</p>
<p>However, it turned out that <em>whisper</em> has a few limitations that I was
unable to circumvent in any manner. I needed to patch it to remove a lot of
its assumption about manipulating file, or that everything is relative to
now (<code>time.time()</code>). I've started to hack on that in my own fork, but… then
everything broke. The <em>whisper</em> project code base is, well, not the state of
the art, and have 0 unit test. I was starring at a huge effort to transform
<em>whisper</em> into the time-series format I wanted, without being sure I wasn't
going to break everything (remember, no test coverage).</p>
<p>I decided to take a break and look into alternatives, and stumbled upon
<a href="http://pandas.pydata.org/">Pandas</a>, a data manipulation and statistics
library for Python. Turns out that Pandas support time-series natively, and
that it could do a lot of the smart computation needed in Gnocchi. I built a
new file format leveraging Pandas for computing the time-series and named it
<strong>carbonara</strong> (a wink to both the
<a href="https://github.com/graphite-project/carbon">Carbon</a> project and pasta, how
clever!). The code is quite small (a third of <em>whisper</em>'s, 200 SLOC vs 600
SLOC), does not have many of the <em>whisper</em> limitations and… it has test
coverage. These Carbonara files are then, in the same fashion, stored into
Swift containers.</p>
<p>Anyway, Gnocchi storage driver system is designed in the same spirit that
the rest of OpenStack and Ceilometer storage driver system. It's a plug-in
system with an API, so anyone can write their own driver. Eoghan Glynn has
already started to write a <a href="http://influxdb.com/">InfluxDB</a> driver, working
closely with the upstream developer of that database. Dina Belova started to
write an <a href="http://opentsdb.net/">OpenTSDB</a> driver. This helps to make sure
the API is designed directly in the right way.</p>
<h1>Handling resources</h1>
<p>Measuring individual entities is great and needed, but you also need to link
them with resources. When measuring the temperature and the number of a
people in a room, it is useful to link these 2 separate entities to a
resource, in that case the room, and give a name to these relations, so one
is able to identify what attribute of the resource is actually measured. It
is also important to provide the possibility to store attributes on these
resources, such as their owners, the time they started and ended their
existence, etc.</p>
<figure class="illustration">
  <img src="http://julien.danjou.info/media/images/blog/2014/gnocchi-relationship.png" />
  Relationship of entities and resources
</figure>

<p>Once this list of resource is collected, the next step is to list and filter
them, based on any criteria. One might want to retrieve the list of
resources created last week or the list of instances hosted on a particular
node right now.</p>
<p>Resources also need to be specialized. Some resources have attributes that
must be stored in order for filtering to be useful. Think about an instance
name or a router network.</p>
<p>All of these requirements led to to the design of what's called the
<em>indexer</em>. The indexer is responsible for indexing entities, resources, and
link them together. The initial implementation is based on
<a href="http://sqlalchemy.org">SQLAlchemy</a> and should be pretty efficient. It's
easy enough to index the most requested attributes (columns), and they are
also correctly typed.</p>
<p>We plan to establish a model for all known OpenStack resources (instances,
volumes, networks, …) to store and index them into the Gnocchi indexer in
order to request them in an efficient way from one place. The generic
resource class can be used to handle generic resources that are not tied to
OpenStack. It'd be up to the users to store extra attributes.</p>
<p>Dropping the free form metadata we used to have in Ceilometer makes sure
that querying the indexer is going to be efficient and scalable.</p>
<figure class="illustration">
  <img src="http://julien.danjou.info/media/images/blog/2014/gnocchi-classes.png" />
  The indexer classes and their relations
</figure>

<h1>REST API</h1>
<p>All of this is exported via a REST API that was partially designed and
documented in the
<a href="http://git.openstack.org/cgit/openstack/ceilometer-specs/tree/specs/juno/gnocchi.rst">Gnocchi specification in the Ceilometer repository</a>;
though the spec is not up-to-date yet. We plan to auto-generate the
documentation from the code as we are currently doing in Ceilometer.</p>
<p>The REST API is pretty easy to use, and you can use it to manipulate
entities and resources, and request the information back.</p>
<figure class="illustration">
  <img src="http://julien.danjou.info/media/images/blog/2014/gnocchi-architecture.png" />
  Macroscopic view of the Gnocchi architecture
</figure>

<h1>Roadmap &amp; Ceilometer integration</h1>
<p>All of this plan has been exposed and discussed with the Ceilometer team
during the last
<a href="https://www.openstack.org/summit/openstack-summit-atlanta-2014/">OpenStack summit in Atlanta</a>
in May 2014, for the Juno release. I led a session about this entire
concept, and convinced the team that using Gnocchi for our metric storage
would be a good approach to solve the Ceilometer collector scalability
issue.</p>
<p>It was decided to conduct this project experiment in parallel of the current
Ceilometer collector for the time being, and see where that would lead the
project to.</p>
<h1>Early benchmarks</h1>
<p>Some engineers from Mirantis did a few benchmarks around Ceilometer and also
against an early version of Gnocchi, and Dina Belova presented them to us
during the mid-cycle sprint we organized in Paris in early July.</p>
<p>The following graph sums up pretty well the current Ceilometer performance
issue. The more you feed it with metrics, the more slow it becomes.</p>
<figure class="illustration">
  <img src="http://julien.danjou.info/media/images/blog/2014/gnocchi-benchmarks/image03.png" style="width: 50%;" />
</figure>

<p>For Gnocchi, while the numbers themselves are not fantastic, what is
interesting is that all the graphs below show that the performances are
stable without correlation with the number of resources, entities or
measures. This proves that, indeed, most of the code is built around a
complexity of <em>O(1)</em>, and not <em>O(n)</em> anymore.</p>
<div class="row-fluid">
  <img class="span4" src="http://julien.danjou.info/media/images/blog/2014/gnocchi-benchmarks/image00.png" />
  <img class="span4" src="http://julien.danjou.info/media/images/blog/2014/gnocchi-benchmarks/image01.png" />
  <img class="span4" src="http://julien.danjou.info/media/images/blog/2014/gnocchi-benchmarks/image04.png" />
</div>

<div class="row-fluid">
  <img class="span6" src="http://julien.danjou.info/media/images/blog/2014/gnocchi-benchmarks/image05.png" />
  <img class="span6" src="http://julien.danjou.info/media/images/blog/2014/gnocchi-benchmarks/image06.png" />
</div>

<h1>Next steps</h1>
<figure class="pull-right illustration" style="width: 30%;">
  <img src="http://julien.danjou.info/media/images/blog/2014/clement-drawing-gnocchi.jpg" />
  <a href="http://honeyvinegar.fr">Clément</a> drawing the logo
</figure>

<p>While the Juno cycle is being wrapped-up for most projects, including
Ceilometer, Gnocchi development is still ongoing. Fortunately, the composite
architecture of Ceilometer allows a lot of its features to be replaced by
some other code dynamically. That, for example, enables Gnocchi to provides
a Ceilometer dispatcher plugin for its collector, without having to ship the
actual code in Ceilometer itself. That should help the development of
Gnocchi to not be slowed down by the release process for now.</p>
<p>The Ceilometer team aims to provide Gnocchi as a sort of technology preview
with the Juno release, allowing it to be deployed along and plugged with
Ceilometer. We'll discuss how to integrate it in the project in a more
permanent and strong manner probably during the
<a href="https://www.openstack.org/summit/openstack-paris-summit-2014/">OpenStack Summit for Kilo</a>
that will take place next November in Paris.</p>