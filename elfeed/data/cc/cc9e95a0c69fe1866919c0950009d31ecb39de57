<table>
<tbody>
<tr>
<td height="100" width="110"><a><img src="http://s3.amazonaws.com/golangweekly/swim.png" /></a></td>
<td>
<p>Welcome to this special not-quite-end-of-year edition of Go Newsletter. 2013 saw some excellent articles published, some of which are linked below. It's nearly a year since Golang Weekly (as it used to be known) was revived too, and we've almost arrived at 3,500 subscribers. Thanks to all of you for reading, contributing links and sending feedback over the past year. Compiled by <a href="https://twitter.com/mattrco">Matt Cottingham</a> and <a href="https://twitter.com/kelseyhightower">Kelsey Hightower</a>.</p>
</td>
</tr>
</tbody>
</table>
<h4>ARTICLES</h4>
<p><a href="http://www.goinggo.net/2013/12/macro-view-of-map-internals-in-go.html">Macro view of map internals</a><br />A good overview of how maps are implemented.</p>
<p><a href="http://blog.gopheracademy.com/day-02-go-1.2-performance-improvements">Go 1.2 performance improvements</a><br />A summary of the performance improvements gained between Go 1.1 and Go 1.2.</p>
<p><a href="http://justinas.org/embrace-gos-http-tools/">Embrace Go's HTTP tools</a><br />Writing code that takes full advantage of the existing interfaces in net/http.</p>
<p><a href="http://dave.cheney.net/2013/06/02/why-is-a-goroutines-stack-infinite">Why is a Goroutine's stack infinite?</a></p>
<p><a href="http://dave.cheney.net/2013/10/15/how-does-the-go-build-command-work">How does the go build command work?</a><br />A look at the what `go build` does.</p>
<p><a href="http://blog.gopheracademy.com/recursion">Recursion and tail calls in Go</a><br />A look at the assembly generated by a recursive function.</p>
<p><a href="http://morsmachine.dk/go-scheduler">The Go scheduler</a><br />A write-up on the new scheduler in Go 1.1.</p>
<p><a href="http://research.swtch.com/pprof">How to build a user-level CPU profiler</a><br />Russ Cox writes about how pprof is implemented.</p>
<p><a href="http://blog.campoy.cat/2013/12/writing-moder-web-app-with-go-tdd-rest.html">Writing a modern web app with Go, TDD, REST, and AngularJS</a><br />"The idea was to show how Go can be used to build modern web applications, where the UI is developed using AngularJS and the communication with the server is done via a REST API."</p>
<p><a href="http://blog.golang.org/the-path-to-go-1">The path to Go 1</a><br />Prior to Go 1.1, this talk from OSCON covered how Go 1 was refined.</p>
<p><a href="http://blog.golang.org/first-go-program">The first Go program</a></p>
<p><a href="http://blog.golang.org/4years">Four years of Go</a><br />"The Go team has been amazed by the growth of the Go community over the past four years. We are thrilled to see so many great things being built with Go, and deeply grateful to work with our wonderful and dedicated contributors. Thank you, everyone."</p>
<h4>SPONSORS</h4>
<table>
<tbody>
<tr>
<td width="130"><a href="http://www.apcera.com/"><img src="http://s3.amazonaws.com/golangweekly/apcera.png" /></a></td>
<td>
<p style="font-size: 13px;"><a href="http://www.apcera.com/">Apcera</a> is the creator of the modern enterprise IT platform. Driven by policy, the platform solves systemic challenges and blends new and existing technologies to unify IT. Enterprise grade, the platform grows with needs and empowers IT to innovate faster now and well into the future.</p>
</td>
</tr>
<tr>
<td width="130"><a href="http://www.iron.io/"><img src="http://s3.amazonaws.com/golangweekly/iron_io.png" /></a></td>
<td>
<p style="font-size: 13px;"><a href="http://www.iron.io/">Iron.io</a> is the maker of IronMQ, a scalable cloud-based message queue, and IronWorker, an elastic task queue/worker service, and one of the first companies to use Go in production. Iron.io's services are designed for building distributed cloud applications quickly and operating at scale. The services are easy to use, highly available, and require no setup and no ops. Reduce complexity, build to scale, get Iron.</p>
</td>
</tr>
</tbody>
</table>