<p>
Since a friend has just raised the question, "Find the deepest node in
a binary tree," here's my Clojure-flavoured answer:
</p>

<div class="org-src-container">

<pre class="src src-clojure">(<span style="color: #f92672;">defn</span> <span style="color: #a6e22e;">deepest</span>
  [node]
  (<span style="color: #f92672;">if</span> node
    (<span style="color: #f92672;">if</span> (leaf? node)
      [0 node]
      (<span style="color: #f92672;">let</span> [[depth leaf] (<span style="color: #ae81ff;">last</span> (<span style="color: #ae81ff;">sort</span> [(deepest (<span style="color: #fd971f;">:left</span> node))
                                      (deepest (<span style="color: #fd971f;">:right</span> node))]))]
        [(<span style="color: #ae81ff;">inc</span> depth) leaf]))))
</pre>
</div>

<p>
And here it is in action:
</p>

<div class="org-src-container">

<pre class="src src-clojure">(deepest {<span style="color: #fd971f;">:left</span> <span style="color: #e6db74;">"A"</span>
          <span style="color: #fd971f;">:right</span> {<span style="color: #fd971f;">:left</span> {<span style="color: #fd971f;">:left</span> <span style="color: #e6db74;">"B"</span>
                         <span style="color: #fd971f;">:right</span> <span style="color: #e6db74;">"C"</span>}
                  <span style="color: #fd971f;">:right</span> <span style="color: #e6db74;">"D"</span>}})
</pre>
</div>

<pre class="example">
[3 "C"]
</pre>

<p>
His response? "It's <i>a bit</i> longer in C++."
</p><img src="http://feeds.feedburner.com/~r/KrisJenkinsBlog/~4/Tp3lwFoEWK0" height="1" width="1"/>