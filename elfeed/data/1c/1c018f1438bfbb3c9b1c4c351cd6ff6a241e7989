<p>
<a href="/2013/02/solving-logic-puzzles-with-clojures-corelogic.html">In part one</a> we laid the foundations for solving logic puzzles with
Clojure and <code>core.logic</code>. We built a <code>core.logic</code> query that encodes
</p>

<p>
rules of this particular puzzle, and come up with a solution.
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">The Rules</h2>
<div class="outline-text-2" id="text-1">
<p>
Let's recap the rules:
</p>

<blockquote>
<ol class="org-ol">
<li>Of Landon and Jason, one has the 7:30pm reservation and the other loves mozzarella.
</li>
<li>The blue cheese enthusiast subscribed to Fortune.
</li>
<li>The muenster enthusiast didn't subscribe to Vogue.
</li>
<li>The 5 people were the Fortune subscriber, Landon, the person with a
reservation at 5:00pm, the mascarpone enthusiast, and the Vogue
subscriber.
</li>
<li>The person with a reservation at 5:00pm didn't subscribe to Time.
</li>
<li>The Cosmopolitan subscriber has an earlier reservation than the mascarpone enthusiast.
</li>
<li>Bailey has a later reservation than the blue cheese enthusiast.
</li>
<li>Either the person with a reservation at 7:00pm or the person with a
reservation at 7:30pm subscribed to Fortune.
</li>
<li>Landon has a later reservation than the Time subscriber.
</li>
<li>The Fortune subscriber is not Jamari.
</li>
<li>The person with a reservation at 5:00pm loves mozzarella.
</li>
</ol>
</blockquote>

<p>
When you look through them there are only really 5 <i>kinds</i> of rule in
this puzzle, so we'll group them and tackle them in order of
complexity.
</p>
</div>

<div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1">Simple Facts</h3>
<div class="outline-text-3" id="text-1-1">
<p>
Rules (2) and (11) are the simplest:
</p>

<ul class="org-ul">
<li>The blue cheese enthusiast subscribed to Fortune.
</li>
<li>The person with a reservation at 5:00pm loves mozzarella.
</li>
</ul>

<p>
The first we handle by saying, "one of the answers - and we don't care
which one - has the shape <code>[* :fortune :blue-cheese *]</code>. We handle <code>*</code>
with an <code>(lvar)</code>, and one-but-any-one with <code>membero</code>, to give us this:
</p>

<div class="org-src-container">

<pre class="src src-clojure">(<span style="color: #f92672;">defn</span> <span style="color: #a6e22e;">rule-2</span>
  <span style="color: #e6db74;">"The blue cheese enthusiast subscribed to Fortune."</span>
  [answers]
  (membero [(lvar) <span style="color: #fd971f;">:fortune</span> <span style="color: #fd971f;">:blue-cheese</span> (lvar)] answers))
</pre>
</div>

<p>
In English, <code>[* :fortune :blue-cheese *]</code> is a member of the answer list.
</p>

<p>
That's fine, but I've a feeling we're going to be writing <code>(lvar)</code> a
lot, so for rule 11 we'll start using
<code>clojure.tools.macro/symbol-macrolet</code> for easier syntax:
</p>

<div class="org-src-container">

<pre class="src src-clojure">(<span style="color: #f92672;">defn</span> <span style="color: #a6e22e;">rule-11</span>
  <span style="color: #e6db74;">"The person with a reservation at 5:00pm loves mozzarella."</span>
  [answers]
  (symbol-macrolet [_ (lvar)]
                   (membero [_ _ <span style="color: #fd971f;">:mozzarella</span> 5] answers)))
</pre>
</div>
</div>
</div>
<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2">Negated Facts</h3>
<div class="outline-text-3" id="text-1-2">
<p>
The second class of rules are negations:
</p>

<ul class="org-ul">
<li>The muenster enthusiast didn't subscribe to Vogue.
</li>
<li>The person with a reservation at 5:00pm didn't subscribe to Time.
</li>
<li>The Fortune subscriber is not Jamari.
</li>
</ul>

<p>
Before we solve those, let's take a look at a naive first-pass that tripped me up:
</p>

<div class="org-src-container">

<pre class="src src-clojure">(<span style="color: #f92672;">defn</span> <span style="color: #a6e22e;">BAD-rule-3</span>
  <span style="color: #e6db74;">"The muenster enthusiast didn't subscribe to Vogue."</span>
  [answers]
  (symbol-macrolet
   [_ (lvar)]
   (not-membero (<span style="color: #ae81ff;">==</span> [_ <span style="color: #fd971f;">:vogue</span> <span style="color: #fd971f;">:muenster</span> _] answers))))
</pre>
</div>

<p>
<code>not-membero</code> isn't a built-in function of <code>core.logic</code>, but <a href="http://stackoverflow.com/questions/11964055/constraining-two-vectors-to-be-in-the-same-domain-but-not-be-members-of-each-ot">it's easy
enough to find</a>.
</p>

<p>
Sadly this doesn't work. It looks like it's saying, "Match a person
who likes Vogue and muenster cheese and make sure it's not in the list
of answers." But really it's saying, "Is it possible to construct a
tuple that has Vogue and muenster, but <b>isn't</b> in the answer list?"
That answer to that is, yes. <code>[nil :vogue :muenster nil]</code> would be
such a tuple. So the rule is trivially and always true. In effect, it
does nothing.
</p>

<p>
No, to encode these rules correctly we need to say something about
what <b>is</b> in the answer list, and then make extra assertions about
those things. We need to say, "There's a tuple with Vogue, a tuple
with muenster, they're both in the answer list but they aren't the
same tuple." Like this:
</p>

<div class="org-src-container">

<pre class="src src-clojure">(<span style="color: #f92672;">defn</span> <span style="color: #a6e22e;">rule-3</span>
  <span style="color: #e6db74;">"The muenster enthusiast didn't subscribe to Vogue."</span>
  [answers]
  (symbol-macrolet
   [_ (lvar)]
   (fresh [s1 s2]
          (<span style="color: #ae81ff;">==</span> [_ <span style="color: #fd971f;">:vogue</span> _ _] s1)
          (<span style="color: #ae81ff;">==</span> [_ _ <span style="color: #fd971f;">:muenster</span> _] s2)
          (membero s1 answers)
          (membero s2 answers)
          (!= s1 s2))))
</pre>
</div>

<p>
That works. And note the use of <code>fresh</code> to introduce the named, local logic variables (magic boxes) we need.
</p>

<p>
Let's encode the other two rules of this type:
</p>

<div class="org-src-container">

<pre class="src src-clojure">(<span style="color: #f92672;">defn</span> <span style="color: #a6e22e;">rule-5</span>
  <span style="color: #e6db74;">"The person with a reservation at 5:00pm didn't subscribe to Time."</span>
  [answers]
  (symbol-macrolet
   [_ (lvar)]
   (fresh [s1 s2]
          (<span style="color: #ae81ff;">==</span> [_ _ _ 5] s1)
          (<span style="color: #ae81ff;">==</span> [_ <span style="color: #fd971f;">:time</span> _ _] s2)
          (membero s1 answers)
          (membero s2 answers)
          (!= s1 s2))))
</pre>
</div>

<div class="org-src-container">

<pre class="src src-clojure">(<span style="color: #f92672;">defn</span> <span style="color: #a6e22e;">rule-10</span>
  <span style="color: #e6db74;">"The Fortune subscriber is not Jamari."</span>
  [answers]
  (symbol-macrolet
   [_ (lvar)]
   (fresh [s1 s2]
          (<span style="color: #ae81ff;">==</span> [_ <span style="color: #fd971f;">:fortune</span> _ _] s1)
          (<span style="color: #ae81ff;">==</span> [<span style="color: #fd971f;">:jamari</span> _ _ _] s2)
          (membero s1 answers)
          (membero s2 answers)
          (!= s1 s2))))
</pre>
</div>
</div>
</div>
<div id="outline-container-sec-1-3" class="outline-3">
<h3 id="sec-1-3">Related Pairs</h3>
<div class="outline-text-3" id="text-1-3">
<p>
The third class of rules relate pairs of facts:
</p>

<ul class="org-ul">
<li>Either the person with a reservation at 7:00pm or the person with
a reservation at 7:30pm subscribed to Fortune."
</li>
<li>Of Landon and Jason, one has the 7:30pm reservation and the other loves mozzarella.
</li>
</ul>

<p>
For these we can use <code>conde</code> to make some OR statements. Here's the code for the first rule:
</p>

<div class="org-src-container">

<pre class="src src-clojure">(<span style="color: #f92672;">defn</span> <span style="color: #a6e22e;">rule-8</span>
  <span style="color: #e6db74;">"Either the person with a reservation at 7:00pm or the person with a</span>
<span style="color: #e6db74;">   reservation at 7:30pm subscribed to Fortune."</span>
  [answers]
  (symbol-macrolet
   [_ (lvar)]
   (fresh [r]
          (membero [_ <span style="color: #fd971f;">:fortune</span> _ r] answers)
          (conde [(<span style="color: #ae81ff;">==</span> r 7)]
                 [(<span style="color: #ae81ff;">==</span> r 7.5)]))))
</pre>
</div>

<p>
This is saying, "There's an answer with Fortune in it, and I want to
make a further assertion about the reservation, so name it <code>r</code>. My
further assertion is, <code>r</code> is either 7pm or 7:30pm."
</p>

<p>
Fairly simple. And the next is only a little more complicated:
</p>

<div class="org-src-container">

<pre class="src src-clojure">(<span style="color: #f92672;">defn</span> <span style="color: #a6e22e;">rule-1</span>
  <span style="color: #e6db74;">"Of Landon and Jason, one has the 7:30pm reservation and the other loves mozzarella."</span>
  [answers]
  (symbol-macrolet
   [_ (lvar)]
   (fresh [c1 r1 c2 r2]
          (membero [<span style="color: #fd971f;">:landon</span> _ c1 r1] answers)
          (membero [<span style="color: #fd971f;">:jason</span> _ c2 r2] answers)
          (conde
           [(<span style="color: #ae81ff;">==</span> r1 7.5) (<span style="color: #ae81ff;">==</span> c2 <span style="color: #fd971f;">:mozzarella</span>)]
           [(<span style="color: #ae81ff;">==</span> r2 7.5) (<span style="color: #ae81ff;">==</span> c1 <span style="color: #fd971f;">:mozzarella</span>)]))))
</pre>
</div>

<p>
This is saying, "There's an answer with Landon in, and I want to make
some assertions about his choice of cheese &amp; reservation. Ditto for
Jason<sup><a id="fnr.1" name="fnr.1" class="footref" href="#fn.1">1</a></sup>."  Then the assertions, "Either the first reservation
is 7:30pm and the second cheese is mozarella, or the other way
around."
</p>
</div>
</div>
<div id="outline-container-sec-1-4" class="outline-3">
<h3 id="sec-1-4">Mutual Exclusion</h3>
<div class="outline-text-3" id="text-1-4">
<p>
Now we're on to the home straight. The next class of rules - actually
there's only one of them - is a description of five separate tuples:
</p>

<ul class="org-ul">
<li>The 5 people were the Fortune subscriber, Landon, the person with
a reservation at 5:00pm, the mascarpone enthusiast, and the Vogue
subscriber.
</li>
</ul>

<p>
The thing to notice here is that the rule's really saying, whoever has
one trait in that list can't have any of the others. So we can use
<code>permuteo</code> again to describe all 5 tuples, allowing for the facts to
appear in any order:
</p>

<div class="org-src-container">

<pre class="src src-clojure">(<span style="color: #f92672;">defn</span> <span style="color: #a6e22e;">rule-4</span>
  <span style="color: #e6db74;">"The 5 people were the Fortune subscriber, Landon, the person with a</span>
<span style="color: #e6db74;">   reservation at 5:00pm, the mascarpone enthusiast, and the Vogue</span>
<span style="color: #e6db74;">   subscriber."</span>
  [answers]
  (symbol-macrolet
   [_ (lvar)]
   (permuteo [[_ <span style="color: #fd971f;">:fortune</span> _ _]
              [<span style="color: #fd971f;">:landon</span> _ _ _]
              [_ _ _ 5]
              [_ _ <span style="color: #fd971f;">:mascarpone</span> _]
              [_ <span style="color: #fd971f;">:vogue</span> _ _]]
             answers)))
</pre>
</div>
</div>
</div>
<div id="outline-container-sec-1-5" class="outline-3">
<h3 id="sec-1-5">Relative Facts</h3>
<div class="outline-text-3" id="text-1-5">
<p>
Okay, last class of rule:
</p>

<ul class="org-ul">
<li>The Cosmopolitan subscriber has an earlier reservation than the mascarpone enthusiast.
</li>
<li>Bailey has a later reservation than the blue cheese enthusiast.
</li>
<li>Landon has a later reservation than the Time subscriber.
</li>
</ul>

<p>
These are all very similar to the related pairs above, but with a
greater-than or less-than statement that makes things a little
tricker. Actually, it makes things much trickier, as we can't just use
<code>&lt;</code> and <code>&gt;</code> in <code>core.logic</code>.
</p>

<p>
I've taken an easy way out here. If I say that the reservation times
are in strict order <code>[5 6 7 7.5 8.5]</code>, then I can make greater-than
and less-than statements by saying one is to the left of another.
</p>

<p>
I'll define to-the-left-of as this:
</p>

<div class="org-src-container">

<pre class="src src-clojure">(<span style="color: #f92672;">defne</span> <span style="color: #a6e22e;">lefto</span>
  <span style="color: #e6db74;">"x appears to the left of y in collection l."</span>
  [x y l]
  ([_ _ [x . tail]] (membero y tail))
  ([_ _ [_ . tail]] (lefto x y tail)))
</pre>
</div>

<p>
In English, "either x is the head of the list and y is a member of its
tail OR drop the head and recur."
</p>

<p>
With that helper in place, the next three rules should look pretty clear:
</p>

<div class="org-src-container">

<pre class="src src-clojure">(<span style="color: #f92672;">defn</span> <span style="color: #a6e22e;">rule-6</span>
  <span style="color: #e6db74;">"The Cosmopolitan subscriber has an earlier reservation than the</span>
<span style="color: #e6db74;">   mascarpone enthusiast."</span>
  [answers]
  (symbol-macrolet
   [_ (lvar)]
   (fresh [r1 r2]
          (membero [_ <span style="color: #fd971f;">:cosmopolitan</span> _ r1] answers)
          (membero [_ _ <span style="color: #fd971f;">:mascarpone</span> r2] answers)
          (lefto r1 r2 [5 6 7 7.5 8.5]))))
</pre>
</div>

<div class="org-src-container">

<pre class="src src-clojure">(<span style="color: #f92672;">defn</span> <span style="color: #a6e22e;">rule-7</span>
  <span style="color: #e6db74;">"Bailey has a later reservation than the blue cheese enthusiast."</span>
  [answers]
  (symbol-macrolet
   [_ (lvar)]
   (fresh [r1 r2]
          (membero [_ _ <span style="color: #fd971f;">:blue-cheese</span> r1] answers)
          (membero [<span style="color: #fd971f;">:bailey</span> _ _ r2] answers)
          (lefto r1 r2 [5 6 7 7.5 8.5]))))
</pre>
</div>

<div class="org-src-container">

<pre class="src src-clojure">(<span style="color: #f92672;">defn</span> <span style="color: #a6e22e;">rule-9</span>
  <span style="color: #e6db74;">"Landon has a later reservation than the Time subscriber."</span>
  [answers]
  (symbol-macrolet
   [_ (lvar)]
   (fresh [r1 r2]
          (membero [_ <span style="color: #fd971f;">:time</span> _ r1] answers)
          (membero [<span style="color: #fd971f;">:landon</span> _ _ r2] answers)
          (lefto r1 r2 [5 6 7 7.5 8.5]))))
</pre>
</div>
</div>
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">Take It Home</h2>
<div class="outline-text-2" id="text-2">
<p>
That's it. Our driver function and our rules are all encoded. Running
it produces a list containing a single answer:
</p>

<div class="org-src-container">

<pre class="src src-clojure">(((<span style="color: #fd971f;">:amaya</span>  <span style="color: #fd971f;">:fortune</span>      <span style="color: #fd971f;">:blue-cheese</span> 7)
  (<span style="color: #fd971f;">:bailey</span> <span style="color: #fd971f;">:vogue</span>        <span style="color: #fd971f;">:asiago</span>      8.5)
  (<span style="color: #fd971f;">:jamari</span> <span style="color: #fd971f;">:time</span>         <span style="color: #fd971f;">:mascarpone</span>  6)
  (<span style="color: #fd971f;">:jason</span>  <span style="color: #fd971f;">:cosmopolitan</span> <span style="color: #fd971f;">:mozzarella</span>  5)
  (<span style="color: #fd971f;">:landon</span> <span style="color: #fd971f;">:us-weekly</span>    <span style="color: #fd971f;">:muenster</span>    7.5)))
</pre>
</div>

<p>
On my machine it takes about 1s to find the first answer, and about
16s to search exhaustively (and thus demonstrate that one answer is
all there is).
</p>

<p>
You can <a href="https://github.com/krisajenkins/LogicPuzzles">find the code on GitHub</a> if you want to give it a whirl.
</p>

<p>
Thoughts? Questions? Suggestions? Leave a comment below&#x2026;
</p>
</div>
</div>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" name="fn.1" class="footnum" href="#fnr.1">1</a></sup> <p class="footpara">
One of the hard parts of writing this code was typing Jason
instead of JSON.
</p></div>


</div>
</div><img src="http://feeds.feedburner.com/~r/KrisJenkinsBlog/~4/M_u2r1pGf6c" height="1" width="1"/>