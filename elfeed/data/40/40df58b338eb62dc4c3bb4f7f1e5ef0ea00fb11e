<p>之前說要寫一篇 Go 簡介…不過網路上 Go 的資料已經很豐富，把一些我喜歡 Go 的點記錄下來好了。</p>

<p>Go 是物件導向的語言嗎？是，也不是。</p>

<p>他沒有類別，也沒有繼承。我們來用實例來看看 Go 如何實現物件導向的特性。</p>

<h3>Struct</h3>

<p>有接觸過 c-like 語言的人應該都對 <code>struct</code> 不陌生，我們可以定義一組結構，裡面包含各種資料型態的變數。</p>

<p>舉例來說我們可以定義一個叫 <code>Human</code> 的 <code>struct</code>：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">type</span> <span class="nx">Human</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">name</span> <span class="kt">string</span>
</span><span class='line'>  <span class="nx">age</span> <span class="kt">int</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然後我們就可以這樣來使用：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">person</span> <span class="o">:=</span> <span class="nx">Human</span><span class="p">{</span><span class="s">&quot;Ash&quot;</span><span class="p">,</span> <span class="mi">18</span><span class="p">}</span>
</span><span class='line'><span class="c1">//或者</span>
</span><span class='line'><span class="nx">person</span> <span class="o">:=</span> <span class="nx">Human</span><span class="p">{</span><span class="nx">name</span><span class="p">:</span><span class="s">&quot;Ash&quot;</span><span class="p">,</span> <span class="nx">age</span><span class="p">:</span><span class="mi">18</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">person</span><span class="p">.</span><span class="nx">name</span>
</span><span class='line'><span class="nx">person</span><span class="p">.</span><span class="nx">age</span>
</span></code></pre></td></tr></table></div></figure>




<!--more-->


<p>不一樣的地方是，我們可以給這個 <code>struct</code> 定義方法：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">human</span> <span class="o">*</span><span class="nx">Human</span><span class="p">)</span><span class="nx">Eat</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Eating&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">person</span><span class="p">.</span><span class="nx">Eat</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>我們可以定義另一個 <code>struct</code> 來「繼承」<code>Human</code> 的屬性和方法，例如我們定義一個 <code>F2E</code>：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">type</span> <span class="nx">F2E</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">Human</span>
</span><span class='line'>  <span class="nx">cssLevel</span> <span class="kt">int</span>
</span><span class='line'>  <span class="nx">javascriptLevel</span> <span class="kt">int</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然後我們就可以這樣使用 <code>F2E</code>：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">aar0n</span> <span class="o">:=</span> <span class="nx">F2E</span><span class="p">{</span><span class="nx">Human</span><span class="p">{</span><span class="nx">name</span><span class="p">:</span><span class="s">&quot;aar0n&quot;</span><span class="p">,</span> <span class="nx">age</span><span class="p">:</span><span class="mi">35</span><span class="p">},</span> <span class="mi">80</span><span class="p">,</span> <span class="mi">90</span><span class="p">}</span>
</span><span class='line'><span class="nx">aar0n</span><span class="p">.</span><span class="nx">Eat</span><span class="p">()</span>
</span><span class='line'><span class="c1">// 當然也可以 access Human 的屬性</span>
</span><span class='line'><span class="nx">aar0n</span><span class="p">.</span><span class="nx">name</span>
</span><span class='line'><span class="c1">// 或者</span>
</span><span class='line'><span class="nx">aar0n</span><span class="p">.</span><span class="nx">Human</span><span class="p">.</span><span class="nx">name</span>
</span></code></pre></td></tr></table></div></figure>


<p>我們也可以讓 <code>F2E</code> override <code>Human</code> 的屬性跟方法：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">type</span> <span class="nx">F2E</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">Human</span>
</span><span class='line'>  <span class="nx">cssLevel</span> <span class="kt">int</span>
</span><span class='line'>  <span class="nx">javascriptLevel</span> <span class="kt">int</span>
</span><span class='line'>  <span class="nx">name</span> <span class="kt">int</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">f2e</span> <span class="o">*</span><span class="nx">F2E</span><span class="p">)</span><span class="nx">Eat</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;F2E does not eat!&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// 還是可以 access Human 的屬性跟方法</span>
</span><span class='line'><span class="nx">aar0n</span><span class="p">.</span><span class="nx">Human</span><span class="p">.</span><span class="nx">name</span>
</span><span class='line'><span class="nx">aar0n</span><span class="p">.</span><span class="nx">Human</span><span class="p">.</span><span class="nx">Eat</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Type 其他技巧</h4>

<p><code>type</code> 基本上是一個 alias 資料型態的關鍵字，不只可以使用在 <code>struct</code> 上。例如我們可以定義一個 Value Object 叫 <code>Money</code>：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">type</span> <span class="nx">Money</span> <span class="kt">int</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Money 也可以有方法</span>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">money</span> <span class="nx">Money</span><span class="p">)</span><span class="nx">Disappear</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Magic!&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">money</span> <span class="o">:=</span> <span class="nx">Money</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
</span><span class='line'><span class="nx">money</span><span class="p">.</span><span class="nx">Disappear</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Interface</h3>

<p>Go 另外一個很棒的設計是 <code>interface</code> 來實現多型。基本上 <code>interface</code> 的概念是，假設你會作某些事，我就把你當這個對象。</p>

<p>例如我們定義一個 <code>interface</code> 叫 <code>RD</code>，條件是要會 <code>Coding</code>：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">type</span> <span class="nx">RD</span> <span class="kd">interface</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">Coding</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然後我們幫剛剛的 <code>F2E</code> 加一個 <code>Coding()</code> 的方法，他就滿足了 <code>RD</code> 這個 <code>interface</code>：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">f2e</span> <span class="o">*</span><span class="nx">F2E</span><span class="p">)</span><span class="nx">Coding</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;I write cool css and javascript!&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// RD(會 Coding) 可以工作</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">work</span><span class="p">(</span><span class="nx">rd</span> <span class="nx">RD</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">rd</span><span class="p">.</span><span class="nx">Coding</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">work</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">aar0n</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>所以我們可以再從 <code>Human</code> 繼承出一個 <code>Backend</code> 出來，一樣實作 <code>Coding()</code> 方法，他也就符合了 <code>RD</code> 這個 <code>interface</code>，一樣可以丟去工作。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">type</span> <span class="nx">Backend</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">Human</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">backend</span> <span class="o">*</span><span class="nx">Backend</span><span class="p">)</span><span class="nx">Coding</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;I write Rails applications!&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 凡是 RD(會 Coding) 就給我去工作</span>
</span><span class='line'><span class="nx">ilake</span> <span class="o">:=</span> <span class="nx">Backend</span><span class="p">{</span><span class="nx">Human</span><span class="p">{</span><span class="s">&quot;ilake&quot;</span><span class="p">,</span> <span class="mi">30</span><span class="p">}}</span>
</span><span class='line'><span class="nx">work</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">aar0n</span><span class="p">)</span>
</span><span class='line'><span class="nx">work</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ilake</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>更有趣的地方是，<code>interface</code> 也可以組合(繼承)。例如我們再定義一個 <code>interface</code> 叫 <code>Designer</code> 條件是會 <code>Design()</code>：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">type</span> <span class="nx">Designer</span> <span class="kd">interface</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">Design</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>那我們就可以稱「又會 Design 又會 Coding」的人叫全端工程師(FullStack)：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="c1">// 同時滿足 RD 跟 Designer 兩個 interface</span>
</span><span class='line'><span class="kd">type</span> <span class="nx">FullStack</span> <span class="kd">interface</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">RD</span>
</span><span class='line'>  <span class="nx">Designer</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 既是全端工程師，又會唱歌跳舞，那你肯定是 CTO 了</span>
</span><span class='line'><span class="kd">type</span> <span class="nx">CTO</span> <span class="kd">interface</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">FullStack</span>
</span><span class='line'>  <span class="nx">Dance</span><span class="p">()</span>
</span><span class='line'>  <span class="nx">Sing</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Interface 其他技巧</h4>

<p>在 Go 裡面，所有的資料型態都滿足「空的 interface」 <code>interface{}</code>。所以如果我們真的有一個 <code>slice</code> 或方法，裡面要塞可能是任何型態的變數，我們就可以使用「空 interface」：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="c1">// 隨便你傳</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">DoSomething</span><span class="p">(</span><span class="nx">obj</span> <span class="kd">interface</span><span class="p">{})</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">//...</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 隨便你塞</span>
</span><span class='line'><span class="nx">ary</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kd">interface</span><span class="p">{},</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="nx">ary</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">=</span> <span class="mi">1</span>
</span><span class='line'><span class="nx">ary</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="p">=</span> <span class="s">&quot;string&quot;</span>
</span></code></pre></td></tr></table></div></figure>

