
<p class = 'original'><a href = 'http://martinfowler.com/bliki/Retread.html'>Retread</a> of post orginally made on 02 Aug 2004</p>

<p>For as long as I've been in software there's been a debate
  between <a href="http://martinfowler.com/bliki/FunctionalStaffOrganization.html">FunctionalStaffOrganization</a> and
  <a href="http://martinfowler.com/bliki/TechnicalStaffOrganization.html">TechnicalStaffOrganization</a>. The debate occurs within project teams,
  and across whole IT organizations. It's a constant debate because
  both sides have good logical arguments to support them, and there's
  no real way to test which has an advantage in practice.</p>

<p>Despite the fact that I acknowledge this, I greatly prefer a
  functional organization. I say this knowing there are exceptions and
  you can't follow one route all the time. But I'd rather side with
  too much functional orientation than the other way around.</p>

<p>For me the compelling factor is that of the aligning of
  application teams to business value. I very much believe in the
  irresistibility of <a href="http://catb.org/~esr/jargon/html/C/Conways-Law.html">Conway's
  Law</a> and see the setting of an <a href="http://martinfowler.com/bliki/ApplicationBoundary.html">ApplicationBoundary</a> to be
  primarily a social construct. Since the whole point of software
  development is to serve its customers, then the organization should
  reflect this - yielding teams that are focused on providing business
  value rather than delving deep into technical esoterica.</p>

<p>Fundamentally the argument of
  <a href="http://martinfowler.com/bliki/TechnicalStaffOrganization.html">TechnicalStaffOrganization</a> rests on efficiency - that it's
  wasteful to duplicate systems and that people are more efficient if
  they specialize. I won't deny that you get duplication if you use a
  functional organization, but I'm not so convinced it's so
  wasteful. After all many people believed a centralized, planned
  economy was bound to be more efficient than the wasteful duplication
  of capitalist competition. I'm wary of stretching too much of a parallel
  between macro-economics and software development, but I suspect the
  same issue underlies each of them - human motivation. When people are
  focused away from solving business problems, all sorts of factors
  creep in that introduce inefficiencies far greater than the
  duplication that a technical organization is designed to solve.</p>

<p>I also think there's an inevitability here. Business units need
  applications, if they don't get them they will build their own,
  creating a functional organization by default. After all they have
  the money and power - essentially the same dynamics as drive the
  boom-bust cycle of <a href="http://martinfowler.com/bliki/EnterpriseArchitecture.html">EnterpriseArchitecture</a>.</p>

<p>So I think that <i>most</i> of the time you should organize
  functionally. But that doesn't mean that you should be blind to the
  problems of the approach. Duplicate work and lack of technical
  specialization will be serious problems, and you'll need to do things to
  counter those problems. They're just better problems to have than
  the alternative. </p>

<p class="repost">reposted on 04 Aug 2014</p>

<p class="shares"><span class="label">Share: </span><a href="https://twitter.com/intent/tweet?url=http://martinfowler.com/bliki/PreferFunctionalStaffOrganization.html&amp;text=Bliki: PreferFunctionalStaffOrganization" title="Share on Twitter"><img src="/t_mini-a.png"/></a><a href="https://facebook.com/sharer.php?u=http://martinfowler.com/bliki/PreferFunctionalStaffOrganization.html" title="Share on Facebook"><img src="/fb-icon-20.png"/></a><a href="https://plus.google.com/share?url=http://martinfowler.com/bliki/PreferFunctionalStaffOrganization.html" title="Share on Google Plus"><img src="/gplus-16.png"/></a></p>
